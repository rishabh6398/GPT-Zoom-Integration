/**
 * symbl.ai APIs
 * <h1>Symbl's APIs for external consumers.</h1> <h2>Language Insights API</h2> Symbl's Language Insights API provides an interface for applications to perform the analysis on the raw text and get insights from it. The API automatically detects sentence boundaries and punctuates the sentences, and also returns the updated messages in the response. Conversations are the most unstructured piece of information that we represent information in, and which most of the leads to lot of loss of information by not being able to capture them correctly.<br/> Language Insights API focuses on understanding such texts and generate the useful and important information from them. <br/> Currently the API supports detection of the Action Items in any type of unstructured text. In future the same API will also have support to detect \"Information\" and \"Event\", where Information is any informational piece and Event is a reference to something that has happened in the past.<br/> <h2>Telephony Integration</h2> Symbl can currently integrate with two types of telephony endpoints: 1. SIP trunks<br/> 2. PSTN endpoints<br/> Results are sent via HTTP WebHooks as and when they are available.<br/> <h2>Flow</h2> 1. External Application invokes REST API to join a meeting/session, with the mode (SIP/PSTN) and joining details<br/> 2. Symbl joins the meeting via SIP or PSTN integration<br/> 3. Symbl continuously processes the audio stream received<br/> 4. Symbl calls WebHook whenever transcription results are available<br/>
 *
 * OpenAPI spec version: 1.0
 * Contact: info@symbl.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ActionItemListResponse', 'model/Conversation', 'model/FollowUpListResponse', 'model/InsightsListResponse', 'model/IntentListResponse', 'model/MemberListResponse', 'model/MessageListResponse', 'model/QuestionListResponse', 'model/TopicListResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ActionItemListResponse'), require('../model/Conversation'), require('../model/FollowUpListResponse'), require('../model/InsightsListResponse'), require('../model/IntentListResponse'), require('../model/MemberListResponse'), require('../model/MessageListResponse'), require('../model/QuestionListResponse'), require('../model/TopicListResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.SymblaiApIs) {
      root.SymblaiApIs = {};
    }
    root.SymblaiApIs.ConversationsApi = factory(root.SymblaiApIs.ApiClient, root.SymblaiApIs.ActionItemListResponse, root.SymblaiApIs.Conversation, root.SymblaiApIs.FollowUpListResponse, root.SymblaiApIs.InsightsListResponse, root.SymblaiApIs.IntentListResponse, root.SymblaiApIs.MemberListResponse, root.SymblaiApIs.MessageListResponse, root.SymblaiApIs.QuestionListResponse, root.SymblaiApIs.TopicListResponse);
  }
}(this, function(ApiClient, ActionItemListResponse, Conversation, FollowUpListResponse, InsightsListResponse, IntentListResponse, MemberListResponse, MessageListResponse, QuestionListResponse, TopicListResponse) {
  'use strict';

  /**
   * Conversations service.
   * @module api/ConversationsApi
   * @version 1.0
   */

  /**
   * Constructs a new ConversationsApi. 
   * @alias module:api/ConversationsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getActionItemsByConversationId operation.
     * @callback module:api/ConversationsApi~getActionItemsByConversationIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionItemListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve action items from conversations
     * Get all action-items by conversationId. Returns action-item object.
     * @param {String} conversationId ID of the conversation
     * @param {module:api/ConversationsApi~getActionItemsByConversationIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionItemListResponse}
     */
    this.getActionItemsByConversationId = function(conversationId, callback) {
      var postBody = null;

      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling getActionItemsByConversationId");
      }


      var pathParams = {
        'conversationId': conversationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ActionItemListResponse;

      return this.apiClient.callApi(
        '/v1/conversations/{conversationId}/action-items', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationById operation.
     * @callback module:api/ConversationsApi~getConversationByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Conversation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Conversations
     * Get a conversation by ID. Returns a conversation object
     * @param {String} conversationId ID of the conversation
     * @param {module:api/ConversationsApi~getConversationByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Conversation}
     */
    this.getConversationById = function(conversationId, callback) {
      var postBody = null;

      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling getConversationById");
      }


      var pathParams = {
        'conversationId': conversationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Conversation;

      return this.apiClient.callApi(
        '/v1/conversations/{conversationId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFollowUpsByConversationId operation.
     * @callback module:api/ConversationsApi~getFollowUpsByConversationIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FollowUpListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve follow ups from conversations
     * Get all follow-ups by conversationId. Returns follow-ups object.
     * @param {String} conversationId ID of the conversation
     * @param {module:api/ConversationsApi~getFollowUpsByConversationIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FollowUpListResponse}
     */
    this.getFollowUpsByConversationId = function(conversationId, callback) {
      var postBody = null;

      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling getFollowUpsByConversationId");
      }


      var pathParams = {
        'conversationId': conversationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FollowUpListResponse;

      return this.apiClient.callApi(
        '/v1/conversations/{conversationId}/follow-ups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getInsightsByConversationId operation.
     * @callback module:api/ConversationsApi~getInsightsByConversationIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InsightsListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve insights from Conversations
     * Get all insights by conversationId. Returns a Insights object.
     * @param {String} conversationId ID of the conversation
     * @param {module:api/ConversationsApi~getInsightsByConversationIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InsightsListResponse}
     */
    this.getInsightsByConversationId = function(conversationId, callback) {
      var postBody = null;

      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling getInsightsByConversationId");
      }


      var pathParams = {
        'conversationId': conversationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InsightsListResponse;

      return this.apiClient.callApi(
        '/v1/conversations/{conversationId}/insights', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getIntentsByConversationId operation.
     * @callback module:api/ConversationsApi~getIntentsByConversationIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntentListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve intents from conversation
     * Get all intents by ID. Returns intents object.
     * @param {String} conversationId ID of the conversation
     * @param {module:api/ConversationsApi~getIntentsByConversationIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntentListResponse}
     */
    this.getIntentsByConversationId = function(conversationId, callback) {
      var postBody = null;

      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling getIntentsByConversationId");
      }


      var pathParams = {
        'conversationId': conversationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IntentListResponse;

      return this.apiClient.callApi(
        '/v1/conversations/{conversationId}/intents', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersByConversationId operation.
     * @callback module:api/ConversationsApi~getMembersByConversationIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MemberListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve members from Conversations
     * Get all the members by conversationId. Returns a Members object
     * @param {String} conversationId ID of the conversation
     * @param {module:api/ConversationsApi~getMembersByConversationIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MemberListResponse}
     */
    this.getMembersByConversationId = function(conversationId, callback) {
      var postBody = null;

      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling getMembersByConversationId");
      }


      var pathParams = {
        'conversationId': conversationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MemberListResponse;

      return this.apiClient.callApi(
        '/v1/conversations/{conversationId}/members', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMessagesByConversationId operation.
     * @callback module:api/ConversationsApi~getMessagesByConversationIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve messages from Conversations
     * Get all the messages by conversationId. Returns a Messages object
     * @param {String} conversationId ID of the conversation
     * @param {module:api/ConversationsApi~getMessagesByConversationIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageListResponse}
     */
    this.getMessagesByConversationId = function(conversationId, callback) {
      var postBody = null;

      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling getMessagesByConversationId");
      }


      var pathParams = {
        'conversationId': conversationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MessageListResponse;

      return this.apiClient.callApi(
        '/v1/conversations/{conversationId}/messages', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuestionsByConversationId operation.
     * @callback module:api/ConversationsApi~getQuestionsByConversationIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuestionListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve questions from conversation
     * Get all questions by conversationId. Returns questions object.
     * @param {String} conversationId ID of the conversation
     * @param {module:api/ConversationsApi~getQuestionsByConversationIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuestionListResponse}
     */
    this.getQuestionsByConversationId = function(conversationId, callback) {
      var postBody = null;

      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling getQuestionsByConversationId");
      }


      var pathParams = {
        'conversationId': conversationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = QuestionListResponse;

      return this.apiClient.callApi(
        '/v1/conversations/{conversationId}/questions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTopicsByConversationId operation.
     * @callback module:api/ConversationsApi~getTopicsByConversationIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopicListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve topics from conversation
     * Get all topics by ID. Returns topics object.
     * @param {String} conversationId ID of the conversation
     * @param {module:api/ConversationsApi~getTopicsByConversationIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopicListResponse}
     */
    this.getTopicsByConversationId = function(conversationId, callback) {
      var postBody = null;

      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling getTopicsByConversationId");
      }


      var pathParams = {
        'conversationId': conversationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jwt'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TopicListResponse;

      return this.apiClient.callApi(
        '/v1/conversations/{conversationId}/topics', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
