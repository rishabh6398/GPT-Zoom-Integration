/**
 * symbl.ai APIs
 * <h1>Symbl's APIs for external consumers.</h1> <h2>Language Insights API</h2> Symbl's Language Insights API provides an interface for applications to perform the analysis on the raw text and get insights from it. The API automatically detects sentence boundaries and punctuates the sentences, and also returns the updated messages in the response. Conversations are the most unstructured piece of information that we represent information in, and which most of the leads to lot of loss of information by not being able to capture them correctly.<br/> Language Insights API focuses on understanding such texts and generate the useful and important information from them. <br/> Currently the API supports detection of the Action Items in any type of unstructured text. In future the same API will also have support to detect \"Information\" and \"Event\", where Information is any informational piece and Event is a reference to something that has happened in the past.<br/> <h2>Telephony Integration</h2> Symbl can currently integrate with two types of telephony endpoints: 1. SIP trunks<br/> 2. PSTN endpoints<br/> Results are sent via HTTP WebHooks as and when they are available.<br/> <h2>Flow</h2> 1. External Application invokes REST API to join a meeting/session, with the mode (SIP/PSTN) and joining details<br/> 2. Symbl joins the meeting via SIP or PSTN integration<br/> 3. Symbl continuously processes the audio stream received<br/> 4. Symbl calls WebHook whenever transcription results are available<br/>
 *
 * OpenAPI spec version: 1.0
 * Contact: info@symbl.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Action', 'model/ActionItemListResponse', 'model/AudioConfig', 'model/Avatar', 'model/ChannelTrunc', 'model/Conversation', 'model/ConversationActionItem', 'model/ConversationFollowUp', 'model/ConversationInsightItem', 'model/ConversationIntent', 'model/ConversationMessage', 'model/ConversationQuestion', 'model/ConversationTopic', 'model/DueBy', 'model/Endpoint', 'model/EndpointConnectRequest', 'model/EndpointConnectResponse', 'model/EndpointRequestData', 'model/Error', 'model/ExternalEvent', 'model/FollowUpListResponse', 'model/Grant', 'model/Hint', 'model/InsightConfig', 'model/InsightItem', 'model/InsightType', 'model/InsightsListResponse', 'model/InsightsRequest', 'model/InsightsResponse', 'model/Intent', 'model/IntentListResponse', 'model/Language', 'model/LocationTrunc', 'model/MemberListResponse', 'model/MembersInfo', 'model/Message', 'model/MessageListResponse', 'model/Metadata', 'model/Payload', 'model/QuestionListResponse', 'model/RefreshTokenRequest', 'model/RevokeTokenRequest', 'model/SessionTrunc', 'model/SessionUser', 'model/SummaryInfo', 'model/Tag', 'model/TimeZone', 'model/Token', 'model/TopicListResponse', 'model/UserTrunc', 'model/Value', 'api/ActionItemsApi', 'api/AuthenticationApi', 'api/ConnectionToEndpointApi', 'api/ConversationsApi', 'api/ExternalEventWebHookApi', 'api/FollowUpsApi', 'api/InsightsApi', 'api/IntentsApi', 'api/LanguageInsightsApi', 'api/MembersApi', 'api/MessagesApi', 'api/QuestionsApi', 'api/TopicsApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Action'), require('./model/ActionItemListResponse'), require('./model/AudioConfig'), require('./model/Avatar'), require('./model/ChannelTrunc'), require('./model/Conversation'), require('./model/ConversationActionItem'), require('./model/ConversationFollowUp'), require('./model/ConversationInsightItem'), require('./model/ConversationIntent'), require('./model/ConversationMessage'), require('./model/ConversationQuestion'), require('./model/ConversationTopic'), require('./model/DueBy'), require('./model/Endpoint'), require('./model/EndpointConnectRequest'), require('./model/EndpointConnectResponse'), require('./model/EndpointRequestData'), require('./model/Error'), require('./model/ExternalEvent'), require('./model/FollowUpListResponse'), require('./model/Grant'), require('./model/Hint'), require('./model/InsightConfig'), require('./model/InsightItem'), require('./model/InsightType'), require('./model/InsightsListResponse'), require('./model/InsightsRequest'), require('./model/InsightsResponse'), require('./model/Intent'), require('./model/IntentListResponse'), require('./model/Language'), require('./model/LocationTrunc'), require('./model/MemberListResponse'), require('./model/MembersInfo'), require('./model/Message'), require('./model/MessageListResponse'), require('./model/Metadata'), require('./model/Payload'), require('./model/QuestionListResponse'), require('./model/RefreshTokenRequest'), require('./model/RevokeTokenRequest'), require('./model/SessionTrunc'), require('./model/SessionUser'), require('./model/SummaryInfo'), require('./model/Tag'), require('./model/TimeZone'), require('./model/Token'), require('./model/TopicListResponse'), require('./model/UserTrunc'), require('./model/Value'), require('./api/ActionItemsApi'), require('./api/AuthenticationApi'), require('./api/ConnectionToEndpointApi'), require('./api/ConversationsApi'), require('./api/ExternalEventWebHookApi'), require('./api/FollowUpsApi'), require('./api/InsightsApi'), require('./api/IntentsApi'), require('./api/LanguageInsightsApi'), require('./api/MembersApi'), require('./api/MessagesApi'), require('./api/QuestionsApi'), require('./api/TopicsApi'));
  }
}(function(ApiClient, Action, ActionItemListResponse, AudioConfig, Avatar, ChannelTrunc, Conversation, ConversationActionItem, ConversationFollowUp, ConversationInsightItem, ConversationIntent, ConversationMessage, ConversationQuestion, ConversationTopic, DueBy, Endpoint, EndpointConnectRequest, EndpointConnectResponse, EndpointRequestData, Error, ExternalEvent, FollowUpListResponse, Grant, Hint, InsightConfig, InsightItem, InsightType, InsightsListResponse, InsightsRequest, InsightsResponse, Intent, IntentListResponse, Language, LocationTrunc, MemberListResponse, MembersInfo, Message, MessageListResponse, Metadata, Payload, QuestionListResponse, RefreshTokenRequest, RevokeTokenRequest, SessionTrunc, SessionUser, SummaryInfo, Tag, TimeZone, Token, TopicListResponse, UserTrunc, Value, ActionItemsApi, AuthenticationApi, ConnectionToEndpointApi, ConversationsApi, ExternalEventWebHookApi, FollowUpsApi, InsightsApi, IntentsApi, LanguageInsightsApi, MembersApi, MessagesApi, QuestionsApi, TopicsApi) {
  'use strict';

  /**
   * h1Symbls_APIs_for_external_consumers_h1h2Language_Insights_APIh2_Symbls_Language_Insights_API_provides_an_interface_for_applications_to_perform_the_analysis_on_the_raw_text_and_get_insights_from_it__The_API_automatically_detects_sentence_boundaries_and_punctuates_the_sentences_and_also_returns_the_updated_messages_in_the_response__Conversations_are_the_most_unstructured_piece_of_information_that_we_represent_information_in_and_which_most_of_the_leads_to_lot_of_loss_of_information_by_not_being_able_to_capture_them_correctly_brLanguage_Insights_API_focuses_on_understanding_such_texts_and_generate_the_useful_and_important_information_from_them__brCurrently_the_API_supports_detection_of_the_Action_Items_in_any_type_of_unstructured_text__In_future_the_same_API_will_also_have_support_to_detect_Information_and_Event_where_Information_is_any_informational_piece_and_Event_is_a_reference_to_something_that_has_happened_in_the_past_brh2Telephony_Integrationh2_Symbl_can_currently_integrate_with_two_types_of_telephony_endpoints1__SIP_trunksbr_2__PSTN_endpointsbr_Results_are_sent_via_HTTP_WebHooks_as_and_when_they_are_available_brh2Flowh2_1__External_Application_invokes_REST_API_to_join_a_meetingsession_with_the_mode__SIPPSTN_and_joining_detailsbr_2__Symbl_joins_the_meeting_via_SIP_or_PSTN_integrationbr_3__Symbl_continuously_processes_the_audio_stream_receivedbr_4__Symbl_calls_WebHook_whenever_transcription_results_are_availablebr.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var SymblaiApIs = require('index'); // See note below*.
   * var xxxSvc = new SymblaiApIs.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new SymblaiApIs.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new SymblaiApIs.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new SymblaiApIs.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Action model constructor.
     * @property {module:model/Action}
     */
    Action: Action,
    /**
     * The ActionItemListResponse model constructor.
     * @property {module:model/ActionItemListResponse}
     */
    ActionItemListResponse: ActionItemListResponse,
    /**
     * The AudioConfig model constructor.
     * @property {module:model/AudioConfig}
     */
    AudioConfig: AudioConfig,
    /**
     * The Avatar model constructor.
     * @property {module:model/Avatar}
     */
    Avatar: Avatar,
    /**
     * The ChannelTrunc model constructor.
     * @property {module:model/ChannelTrunc}
     */
    ChannelTrunc: ChannelTrunc,
    /**
     * The Conversation model constructor.
     * @property {module:model/Conversation}
     */
    Conversation: Conversation,
    /**
     * The ConversationActionItem model constructor.
     * @property {module:model/ConversationActionItem}
     */
    ConversationActionItem: ConversationActionItem,
    /**
     * The ConversationFollowUp model constructor.
     * @property {module:model/ConversationFollowUp}
     */
    ConversationFollowUp: ConversationFollowUp,
    /**
     * The ConversationInsightItem model constructor.
     * @property {module:model/ConversationInsightItem}
     */
    ConversationInsightItem: ConversationInsightItem,
    /**
     * The ConversationIntent model constructor.
     * @property {module:model/ConversationIntent}
     */
    ConversationIntent: ConversationIntent,
    /**
     * The ConversationMessage model constructor.
     * @property {module:model/ConversationMessage}
     */
    ConversationMessage: ConversationMessage,
    /**
     * The ConversationQuestion model constructor.
     * @property {module:model/ConversationQuestion}
     */
    ConversationQuestion: ConversationQuestion,
    /**
     * The ConversationTopic model constructor.
     * @property {module:model/ConversationTopic}
     */
    ConversationTopic: ConversationTopic,
    /**
     * The DueBy model constructor.
     * @property {module:model/DueBy}
     */
    DueBy: DueBy,
    /**
     * The Endpoint model constructor.
     * @property {module:model/Endpoint}
     */
    Endpoint: Endpoint,
    /**
     * The EndpointConnectRequest model constructor.
     * @property {module:model/EndpointConnectRequest}
     */
    EndpointConnectRequest: EndpointConnectRequest,
    /**
     * The EndpointConnectResponse model constructor.
     * @property {module:model/EndpointConnectResponse}
     */
    EndpointConnectResponse: EndpointConnectResponse,
    /**
     * The EndpointRequestData model constructor.
     * @property {module:model/EndpointRequestData}
     */
    EndpointRequestData: EndpointRequestData,
    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error: Error,
    /**
     * The ExternalEvent model constructor.
     * @property {module:model/ExternalEvent}
     */
    ExternalEvent: ExternalEvent,
    /**
     * The FollowUpListResponse model constructor.
     * @property {module:model/FollowUpListResponse}
     */
    FollowUpListResponse: FollowUpListResponse,
    /**
     * The Grant model constructor.
     * @property {module:model/Grant}
     */
    Grant: Grant,
    /**
     * The Hint model constructor.
     * @property {module:model/Hint}
     */
    Hint: Hint,
    /**
     * The InsightConfig model constructor.
     * @property {module:model/InsightConfig}
     */
    InsightConfig: InsightConfig,
    /**
     * The InsightItem model constructor.
     * @property {module:model/InsightItem}
     */
    InsightItem: InsightItem,
    /**
     * The InsightType model constructor.
     * @property {module:model/InsightType}
     */
    InsightType: InsightType,
    /**
     * The InsightsListResponse model constructor.
     * @property {module:model/InsightsListResponse}
     */
    InsightsListResponse: InsightsListResponse,
    /**
     * The InsightsRequest model constructor.
     * @property {module:model/InsightsRequest}
     */
    InsightsRequest: InsightsRequest,
    /**
     * The InsightsResponse model constructor.
     * @property {module:model/InsightsResponse}
     */
    InsightsResponse: InsightsResponse,
    /**
     * The Intent model constructor.
     * @property {module:model/Intent}
     */
    Intent: Intent,
    /**
     * The IntentListResponse model constructor.
     * @property {module:model/IntentListResponse}
     */
    IntentListResponse: IntentListResponse,
    /**
     * The Language model constructor.
     * @property {module:model/Language}
     */
    Language: Language,
    /**
     * The LocationTrunc model constructor.
     * @property {module:model/LocationTrunc}
     */
    LocationTrunc: LocationTrunc,
    /**
     * The MemberListResponse model constructor.
     * @property {module:model/MemberListResponse}
     */
    MemberListResponse: MemberListResponse,
    /**
     * The MembersInfo model constructor.
     * @property {module:model/MembersInfo}
     */
    MembersInfo: MembersInfo,
    /**
     * The Message model constructor.
     * @property {module:model/Message}
     */
    Message: Message,
    /**
     * The MessageListResponse model constructor.
     * @property {module:model/MessageListResponse}
     */
    MessageListResponse: MessageListResponse,
    /**
     * The Metadata model constructor.
     * @property {module:model/Metadata}
     */
    Metadata: Metadata,
    /**
     * The Payload model constructor.
     * @property {module:model/Payload}
     */
    Payload: Payload,
    /**
     * The QuestionListResponse model constructor.
     * @property {module:model/QuestionListResponse}
     */
    QuestionListResponse: QuestionListResponse,
    /**
     * The RefreshTokenRequest model constructor.
     * @property {module:model/RefreshTokenRequest}
     */
    RefreshTokenRequest: RefreshTokenRequest,
    /**
     * The RevokeTokenRequest model constructor.
     * @property {module:model/RevokeTokenRequest}
     */
    RevokeTokenRequest: RevokeTokenRequest,
    /**
     * The SessionTrunc model constructor.
     * @property {module:model/SessionTrunc}
     */
    SessionTrunc: SessionTrunc,
    /**
     * The SessionUser model constructor.
     * @property {module:model/SessionUser}
     */
    SessionUser: SessionUser,
    /**
     * The SummaryInfo model constructor.
     * @property {module:model/SummaryInfo}
     */
    SummaryInfo: SummaryInfo,
    /**
     * The Tag model constructor.
     * @property {module:model/Tag}
     */
    Tag: Tag,
    /**
     * The TimeZone model constructor.
     * @property {module:model/TimeZone}
     */
    TimeZone: TimeZone,
    /**
     * The Token model constructor.
     * @property {module:model/Token}
     */
    Token: Token,
    /**
     * The TopicListResponse model constructor.
     * @property {module:model/TopicListResponse}
     */
    TopicListResponse: TopicListResponse,
    /**
     * The UserTrunc model constructor.
     * @property {module:model/UserTrunc}
     */
    UserTrunc: UserTrunc,
    /**
     * The Value model constructor.
     * @property {module:model/Value}
     */
    Value: Value,
    /**
     * The ActionItemsApi service constructor.
     * @property {module:api/ActionItemsApi}
     */
    ActionItemsApi: ActionItemsApi,
    /**
     * The AuthenticationApi service constructor.
     * @property {module:api/AuthenticationApi}
     */
    AuthenticationApi: AuthenticationApi,
    /**
     * The ConnectionToEndpointApi service constructor.
     * @property {module:api/ConnectionToEndpointApi}
     */
    ConnectionToEndpointApi: ConnectionToEndpointApi,
    /**
     * The ConversationsApi service constructor.
     * @property {module:api/ConversationsApi}
     */
    ConversationsApi: ConversationsApi,
    /**
     * The ExternalEventWebHookApi service constructor.
     * @property {module:api/ExternalEventWebHookApi}
     */
    ExternalEventWebHookApi: ExternalEventWebHookApi,
    /**
     * The FollowUpsApi service constructor.
     * @property {module:api/FollowUpsApi}
     */
    FollowUpsApi: FollowUpsApi,
    /**
     * The InsightsApi service constructor.
     * @property {module:api/InsightsApi}
     */
    InsightsApi: InsightsApi,
    /**
     * The IntentsApi service constructor.
     * @property {module:api/IntentsApi}
     */
    IntentsApi: IntentsApi,
    /**
     * The LanguageInsightsApi service constructor.
     * @property {module:api/LanguageInsightsApi}
     */
    LanguageInsightsApi: LanguageInsightsApi,
    /**
     * The MembersApi service constructor.
     * @property {module:api/MembersApi}
     */
    MembersApi: MembersApi,
    /**
     * The MessagesApi service constructor.
     * @property {module:api/MessagesApi}
     */
    MessagesApi: MessagesApi,
    /**
     * The QuestionsApi service constructor.
     * @property {module:api/QuestionsApi}
     */
    QuestionsApi: QuestionsApi,
    /**
     * The TopicsApi service constructor.
     * @property {module:api/TopicsApi}
     */
    TopicsApi: TopicsApi
  };

  return exports;
}));
