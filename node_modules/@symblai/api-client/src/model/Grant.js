/**
 * symbl.ai APIs
 * <h1>Symbl's APIs for external consumers.</h1> <h2>Language Insights API</h2> Symbl's Language Insights API provides an interface for applications to perform the analysis on the raw text and get insights from it. The API automatically detects sentence boundaries and punctuates the sentences, and also returns the updated messages in the response. Conversations are the most unstructured piece of information that we represent information in, and which most of the leads to lot of loss of information by not being able to capture them correctly.<br/> Language Insights API focuses on understanding such texts and generate the useful and important information from them. <br/> Currently the API supports detection of the Action Items in any type of unstructured text. In future the same API will also have support to detect \"Information\" and \"Event\", where Information is any informational piece and Event is a reference to something that has happened in the past.<br/> <h2>Telephony Integration</h2> Symbl can currently integrate with two types of telephony endpoints: 1. SIP trunks<br/> 2. PSTN endpoints<br/> Results are sent via HTTP WebHooks as and when they are available.<br/> <h2>Flow</h2> 1. External Application invokes REST API to join a meeting/session, with the mode (SIP/PSTN) and joining details<br/> 2. Symbl joins the meeting via SIP or PSTN integration<br/> 3. Symbl continuously processes the audio stream received<br/> 4. Symbl calls WebHook whenever transcription results are available<br/>
 *
 * OpenAPI spec version: 1.0
 * Contact: info@symbl.ai
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.SymblaiApIs) {
      root.SymblaiApIs = {};
    }
    root.SymblaiApIs.Grant = factory(root.SymblaiApIs.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Grant model module.
   * @module model/Grant
   * @version 1.0
   */

  /**
   * Constructs a new <code>Grant</code>.
   * @alias module:model/Grant
   * @class
   * @param type {module:model/Grant.TypeEnum} Type of grant. 'password' should be used when username and password is being used. 'application' should be used when appId and appSecret are used.
   */
  var exports = function(type) {
    var _this = this;

    _this['type'] = type;




  };

  /**
   * Constructs a <code>Grant</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Grant} obj Optional instance to populate.
   * @return {module:model/Grant} The populated <code>Grant</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('username')) {
        obj['username'] = ApiClient.convertToType(data['username'], 'String');
      }
      if (data.hasOwnProperty('password')) {
        obj['password'] = ApiClient.convertToType(data['password'], 'String');
      }
      if (data.hasOwnProperty('appId')) {
        obj['appId'] = ApiClient.convertToType(data['appId'], 'String');
      }
      if (data.hasOwnProperty('appSecret')) {
        obj['appSecret'] = ApiClient.convertToType(data['appSecret'], 'String');
      }
    }
    return obj;
  }

  /**
   * Type of grant. 'password' should be used when username and password is being used. 'application' should be used when appId and appSecret are used.
   * @member {module:model/Grant.TypeEnum} type
   */
  exports.prototype['type'] = undefined;
  /**
   * Unique username allocated by Symbl when user account was created.
   * @member {String} username
   */
  exports.prototype['username'] = undefined;
  /**
   * Password for the username
   * @member {String} password
   */
  exports.prototype['password'] = undefined;
  /**
   * App ID provided by Symbl for your application
   * @member {String} appId
   */
  exports.prototype['appId'] = undefined;
  /**
   * App Secret provided by Symbl along with the appId
   * @member {String} appSecret
   */
  exports.prototype['appSecret'] = undefined;


  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "password"
     * @const
     */
    "password": "password",
    /**
     * value: "application"
     * @const
     */
    "application": "application"  };


  return exports;
}));


