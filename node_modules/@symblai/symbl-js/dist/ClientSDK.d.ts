export default class ClientSDK {
    constructor(options?: {});
    oauth2: OAuth2;
    apiClient: any;
    cache: Cache;
    logger: import("./logger/Logger").Logger;
    setOffline(isOffline?: boolean): void;
    setReconnectOnError(value: any): void;
    reconnectOnError: any;
    setNetworkConnectivityDispatcher(networkConnectivityDispatcher: any): void;
    init(options: any): Promise<any>;
    basePath: any;
    endpointClient: EndpointApi;
    createStream(options?: {}): Promise<any>;
    startRealtimeRequest(options?: {}): Promise<any>;
    startEndpoint(options: any, callback: any): Promise<any>;
    stopEndpoint(options: any): Promise<any>;
    subscribeToConnection(connectionId: any, options: any): Promise<void>;
    subscribeToStream(connectionId: any, options: any): Promise<{
        close: () => void;
    }>;
    pushEventOnConnection(connectionId: any, event: any, callback: any): Promise<any>;
}
import OAuth2 from "./api/OAuth2";
import Cache from "./cache/Cache";
import EndpointApi from "./api/EndpointApi";
