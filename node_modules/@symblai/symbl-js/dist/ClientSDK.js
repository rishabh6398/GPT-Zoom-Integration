"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
/* eslint-disable max-len */
/* eslint-disable sort-keys */
/* eslint-disable max-lines */
/* eslint-disable padded-blocks */
var EndpointApi_1 = __importDefault(require("./api/EndpointApi"));
var RealtimeApi_1 = __importDefault(require("./api/RealtimeApi"));
var SessionApi_1 = __importDefault(require("./api/SessionApi"));
var StopProcessingEvent_1 = __importDefault(require("./event/StopProcessingEvent"));
var OAuth2_1 = __importDefault(require("./api/OAuth2"));
var Cache_1 = __importDefault(require("./cache/Cache"));
var Logger_1 = __importDefault(require("./logger/Logger"));
var detect_node_1 = __importDefault(require("detect-node"));
var api_client_1 = require("@symblai/api-client");
var EventApi_1 = __importDefault(require("./event/EventApi"));
var ClientSDK = /** @class */ (function () {
    function ClientSDK(options) {
        if (options === void 0) { options = {}; }
        this.oauth2 = new OAuth2_1["default"]();
        this.apiClient = null;
        this.cache = new Cache_1["default"]();
        this.logger = Logger_1["default"];
    }
    // eslint-disable-next-line class-methods-use-this
    ClientSDK.prototype.setOffline = function (isOffline) {
        if (isOffline === void 0) { isOffline = false; }
        // Add more offline/reconnection states here
        RealtimeApi_1["default"].isOffline = isOffline;
        SessionApi_1["default"].isOffline = isOffline;
    };
    ClientSDK.prototype.setReconnectOnError = function (value) {
        this.reconnectOnError = value;
    };
    // eslint-disable-next-line class-methods-use-this
    ClientSDK.prototype.setNetworkConnectivityDispatcher = function (networkConnectivityDispatcher) {
        if (networkConnectivityDispatcher && networkConnectivityDispatcher.hasOwnProperty("forceCheckNetworkConnectivity")) {
            RealtimeApi_1["default"].setNetworkConnectivityDispatcher(networkConnectivityDispatcher);
            SessionApi_1["default"].setNetworkConnectivityDispatcher(networkConnectivityDispatcher);
        }
    };
    ClientSDK.prototype.init = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, appId, appSecret, logLevel, tlsAuth, basePath, accessToken, reconnectOnError;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!options) {
                            throw new Error("options with appId and appSecret must be provided.");
                        }
                        return [4 /*yield*/, options];
                    case 1:
                        _a = _b.sent(), appId = _a.appId, appSecret = _a.appSecret, logLevel = _a.logLevel, tlsAuth = _a.tlsAuth, basePath = _a.basePath, accessToken = _a.accessToken, reconnectOnError = _a.reconnectOnError;
                        if (!appId && !accessToken) {
                            throw new Error('appId is required.');
                        }
                        if (!appSecret && !accessToken) {
                            throw new Error('appSecret is required.');
                        }
                        if (logLevel) {
                            Logger_1["default"].setLevel(logLevel);
                        }
                        if (reconnectOnError) {
                            this.setReconnectOnError(true);
                        }
                        if (!tlsAuth && detect_node_1["default"]) {
                            process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
                        }
                        this.basePath = basePath;
                        Logger_1["default"].trace('Initializing SDK with options: ', options);
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                _this.oauth2.init(options.appId, options.appSecret, options.accessToken)
                                    .then(function () {
                                    var apiClient = new api_client_1.ApiClient();
                                    if (basePath || basePath && basePath !== _this.oauth2.apiClient.basePath) {
                                        apiClient.basePath = basePath;
                                    }
                                    apiClient.authentications = _this.oauth2.apiClient.authentications;
                                    _this.endpointClient = new EndpointApi_1["default"]({}, apiClient);
                                    resolve();
                                })["catch"](function (reason) { return reject(reason); });
                            })];
                }
            });
        });
    };
    ClientSDK.prototype.createStream = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var realtimeClient;
            var _this = this;
            return __generator(this, function (_a) {
                if (!this.oauth2) {
                    throw new Error("SDK is not initialized or failed during initialization.");
                }
                options.basePath = options.basePath || this.basePath;
                if (!options.id) {
                    Logger_1["default"].warn("No 'id' detected. Generating a UUID. Reference 'connectionId' property of the resolved object.");
                    options.id = v4();
                }
                if (!options.reconnectOnError && this.reconnectOnError) {
                    options.reconnectOnError = true;
                }
                realtimeClient = this.cache.get(options.id);
                if (!realtimeClient) {
                    realtimeClient = new RealtimeApi_1["default"](options, this.oauth2, false, {
                        onClose: function () {
                            _this.cache.remove(options.id);
                        }
                    });
                    this.cache.set(options.id, realtimeClient);
                }
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var retryCount = 0;
                        var retry = function () { return __awaiter(_this, void 0, void 0, function () {
                            var _this = this;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (!(retryCount < 4)) return [3 /*break*/, 4];
                                        Logger_1["default"].info("Retry attempt: ", retryCount, this.oauth2);
                                        if (!(this.oauth2 && this.oauth2.activeToken)) return [3 /*break*/, 2];
                                        return [4 /*yield*/, this.oauth2.refreshAuthToken()];
                                    case 1:
                                        _a.sent();
                                        realtimeClient.connect(function (err) { return __awaiter(_this, void 0, void 0, function () {
                                            var _this = this;
                                            return __generator(this, function (_a) {
                                                if (err) {
                                                    reject(err);
                                                }
                                                else {
                                                    resolve({
                                                        stop: function () { return __awaiter(_this, void 0, void 0, function () {
                                                            var conversationData, e_1;
                                                            return __generator(this, function (_a) {
                                                                switch (_a.label) {
                                                                    case 0:
                                                                        _a.trys.push([0, 2, , 3]);
                                                                        return [4 /*yield*/, realtimeClient.stopRequest()];
                                                                    case 1:
                                                                        conversationData = _a.sent();
                                                                        if (conversationData) {
                                                                            Logger_1["default"].info("Realtime request stopped.");
                                                                            delete conversationData.type;
                                                                            return [2 /*return*/, conversationData];
                                                                        }
                                                                        return [2 /*return*/, {}];
                                                                    case 2:
                                                                        e_1 = _a.sent();
                                                                        throw e_1;
                                                                    case 3: return [2 /*return*/];
                                                                }
                                                            });
                                                        }); },
                                                        start: function (options) {
                                                            if (options && typeof options === "object") {
                                                                realtimeClient.options = __assign(__assign({}, (realtimeClient.options || {})), options);
                                                            }
                                                            return new Promise(function (resolveS, rejectS) {
                                                                realtimeClient.sendStart(resolveS, rejectS);
                                                            });
                                                        },
                                                        sendAudio: function (data) {
                                                            realtimeClient.sendAudio(data);
                                                        },
                                                        sendJSON: function (data) {
                                                            realtimeClient.sendAudio(data);
                                                        },
                                                        close: function () {
                                                            realtimeClient.webSocket.disconnect();
                                                            _this.cache.remove(options.id);
                                                        },
                                                        connectionId: realtimeClient.id,
                                                        conversationId: realtimeClient.conversationId
                                                    });
                                                }
                                                return [2 /*return*/];
                                            });
                                        }); });
                                        return [3 /*break*/, 3];
                                    case 2:
                                        Logger_1["default"].info("Active Token not found.");
                                        retryCount++;
                                        setTimeout(retry.bind(this), 1000 * retryCount);
                                        _a.label = 3;
                                    case 3: return [3 /*break*/, 5];
                                    case 4:
                                        reject({ "message": "Could not connect to real-time api after 4 retries." });
                                        _a.label = 5;
                                    case 5: return [2 /*return*/];
                                }
                            });
                        }); };
                        setTimeout(retry.bind(_this), 0);
                    })];
            });
        });
    };
    ClientSDK.prototype.startRealtimeRequest = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var realtimeClient, startRequest;
            var _this = this;
            return __generator(this, function (_a) {
                if (!this.oauth2) {
                    throw new Error("SDK is not initialized or failed during initialization.");
                }
                options.basePath = options.basePath || this.basePath;
                realtimeClient = this.cache.get(options.id);
                if (!realtimeClient) {
                    realtimeClient = new RealtimeApi_1["default"](options, this.oauth2, true, {
                        _onClose: function () {
                            _this.cache.remove(options.id);
                        }
                    });
                    this.cache.set(options.id, realtimeClient);
                }
                startRequest = function (resolve, reject) {
                    Logger_1["default"].info("Starting request.");
                    realtimeClient.startRequest().then(function (conversationId) {
                        Logger_1["default"].info("Realtime request started: ".concat(conversationId));
                        resolve({
                            "stop": function () { return new Promise(function (resolve, reject) {
                                realtimeClient.stopRequest().then(function (conversationData) {
                                    Logger_1["default"].info("Realtime request stopped.");
                                    if (conversationData) {
                                        delete conversationData.type;
                                    }
                                    _this.cache.remove(options.id);
                                    resolve(conversationData);
                                })["catch"](function (err) {
                                    _this.cache.remove(options.id);
                                    reject(err);
                                });
                            }); },
                            "sendAudio": function (data) {
                                realtimeClient.sendAudio(data);
                            },
                            "connectionId": realtimeClient.id,
                            conversationId: conversationId
                        });
                    })["catch"](function (err) {
                        reject(err);
                    });
                };
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var retryCount = 0;
                        var retry = function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (!(retryCount < 4)) return [3 /*break*/, 4];
                                        Logger_1["default"].info("Retry attempt: ", retryCount, this.oauth2);
                                        if (!(this.oauth2 && this.oauth2.activeToken)) return [3 /*break*/, 2];
                                        return [4 /*yield*/, this.oauth2.refreshAuthToken()];
                                    case 1:
                                        _a.sent();
                                        realtimeClient.connect();
                                        startRequest(resolve, reject);
                                        return [3 /*break*/, 3];
                                    case 2:
                                        Logger_1["default"].info("Active Token not found.");
                                        retryCount++;
                                        setTimeout(retry.bind(this), 1000 * retryCount);
                                        _a.label = 3;
                                    case 3: return [3 /*break*/, 5];
                                    case 4:
                                        reject({ "message": "Could not connect to real-time api after 4 retries." });
                                        _a.label = 5;
                                    case 5: return [2 /*return*/];
                                }
                            });
                        }); };
                        setTimeout(retry.bind(_this), 0);
                    })];
            });
        });
    };
    ClientSDK.prototype.startEndpoint = function (options, callback) {
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, validationToken, actions, intents, enableEvents, data, endpointWebhookUrl, headers, pushSpeakerEvents, languagesArray, timezone, languages;
            var _this = this;
            return __generator(this, function (_a) {
                if (!options) {
                    throw new Error("options must be provided.");
                }
                endpoint = options.endpoint, validationToken = options.validationToken, actions = options.actions, intents = options.intents, enableEvents = options.enableEvents, data = options.data, endpointWebhookUrl = options.endpointWebhookUrl, headers = options.headers, pushSpeakerEvents = options.pushSpeakerEvents, languagesArray = options["languages"], timezone = options.timezone;
                if (!endpoint) {
                    throw new Error("endpoint is required.");
                }
                if (!this.endpointClient) {
                    throw new Error("SDK is not initialized or failed during initialization.");
                }
                if (languagesArray && languagesArray.length > 0) {
                    languages = languagesArray.map(function (language) { return ({ "code": language }); });
                }
                if (timezone) {
                    if (!data) {
                        data = {
                            "session": {}
                        };
                    }
                    data.session.location = { "timeZone": { "name": timezone } };
                }
                return [2 /*return*/, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.oauth2.refreshAuthToken()];
                                case 1:
                                    _a.sent();
                                    this.endpointClient.startEndpoint({ endpoint: endpoint, validationToken: validationToken, actions: actions, intents: intents, enableEvents: enableEvents, data: data, endpointWebhookUrl: endpointWebhookUrl, headers: headers, pushSpeakerEvents: pushSpeakerEvents, languages: languages }).
                                        then(function (connection) {
                                        if (callback) {
                                            var sessionApi = new SessionApi_1["default"]({ callback: callback, "id": connection.connectionId,
                                                "basePath": _this.basePath }, _this.oauth2);
                                            sessionApi.connect();
                                        }
                                        resolve(connection);
                                    })["catch"](function (err) {
                                        reject(err);
                                    });
                                    return [2 /*return*/];
                            }
                        });
                    }); })];
            });
        });
    };
    ClientSDK.prototype.stopEndpoint = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var connectionId, actions, data, connection;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.oauth2.refreshAuthToken()];
                    case 1:
                        _a.sent();
                        if (!options) {
                            throw new Error("options must be provided.");
                        }
                        connectionId = options.connectionId, actions = options.actions, data = options.data;
                        if (!connectionId) {
                            throw new Error("connectionId is required to stop the endpoint connection.");
                        }
                        if (!this.endpointClient) {
                            throw new Error("SDK is not initialized or was failed during initialization.");
                        }
                        if (this.cache.contains(connectionId)) {
                            connection = this.cache.get(connectionId);
                            if (connection) {
                                if (connection.eventApi.webSocketStatus === EventApi_1["default"].getWebSocketConnectionStatuses().connected) {
                                    this.pushEventOnConnection(connectionId, new StopProcessingEvent_1["default"]({
                                        "timestamp": new Date().toISOString(),
                                        "topic": StopProcessingEvent_1["default"].topics().speaker
                                    }).toJSON());
                                }
                            }
                        }
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                _this.endpointClient.stopEndpoint({ connectionId: connectionId, actions: actions, data: data }).
                                    then(function (connection) {
                                    resolve(connection);
                                })["catch"](function (err) {
                                    reject(err);
                                });
                            })];
                }
            });
        });
    };
    ClientSDK.prototype.subscribeToConnection = function (connectionId, options) {
        return __awaiter(this, void 0, void 0, function () {
            var sessionApi;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // For backwards compatability. 2nd param was previously
                        // a callback function.
                        if (typeof options === "function") {
                            options = {
                                handlers: {
                                    onMessage: options
                                }
                            };
                        }
                        sessionApi = new SessionApi_1["default"]({
                            options: options,
                            "id": connectionId,
                            "basePath": this.basePath,
                            "isStreaming": false
                        }, this.oauth2);
                        return [4 /*yield*/, this.oauth2.refreshAuthToken()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, sessionApi.connect()];
                }
            });
        });
    };
    ClientSDK.prototype.subscribeToStream = function (connectionId, options) {
        return __awaiter(this, void 0, void 0, function () {
            var sessionApi;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // For backwards compatability. 2nd param was previously
                        // a callback function.
                        if (typeof options === "function") {
                            options = {
                                handlers: {
                                    onMessage: options
                                }
                            };
                        }
                        if (!options.reconnectOnError && this.reconnectOnError) {
                            options.reconnectOnError = true;
                        }
                        sessionApi = new SessionApi_1["default"]({
                            options: options,
                            "id": connectionId,
                            "basePath": this.basePath,
                            "isStreaming": true
                        }, this.oauth2);
                        return [4 /*yield*/, this.oauth2.refreshAuthToken()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, new Promise(function (resolve) {
                                sessionApi.connect(resolve);
                            })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, {
                                close: function () {
                                    return sessionApi.disconnect();
                                }
                            }];
                }
            });
        });
    };
    ClientSDK.prototype.pushEventOnConnection = function (connectionId, event, callback) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        if (_this.cache.contains(connectionId)) {
                            var connection = _this.cache.get(connectionId);
                            if (connection) {
                                if (connection.status === "active") {
                                    connection.pushEvent(event, function (err) {
                                        if (err) {
                                            if (callback) {
                                                callback(err);
                                            }
                                            reject(err);
                                        }
                                        else {
                                            if (callback) {
                                                callback();
                                            }
                                            resolve();
                                        }
                                    });
                                }
                                else if (connection.status === "closed") {
                                    var err = {
                                        "message": "Connection with connectionId '".concat(connectionId, "' has been stopped. Cannot push an event on the stopped connection.")
                                    };
                                    if (callback) {
                                        callback(err);
                                    }
                                    reject(err);
                                }
                                else {
                                    var err = {
                                        "message": "Connection with connectionId '".concat(connectionId, "' is in unexpected state.")
                                    };
                                    if (callback) {
                                        callback(err);
                                    }
                                    reject(err);
                                }
                            }
                            else {
                                var err = {
                                    "message": "Invalid connection by connectionId '".concat(connectionId, "' detected.")
                                };
                                if (callback) {
                                    callback(err);
                                }
                                reject(err);
                            }
                        }
                        else {
                            var err = {
                                "message": "No connection by connectionId '".concat(connectionId, "' found.")
                            };
                            if (callback) {
                                callback(err);
                            }
                            reject(err);
                        }
                    })];
            });
        });
    };
    return ClientSDK;
}());
exports["default"] = ClientSDK;
