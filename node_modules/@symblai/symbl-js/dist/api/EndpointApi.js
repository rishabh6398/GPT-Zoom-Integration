"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var api_client_1 = require("@symblai/api-client");
var ErrorHandler_1 = __importDefault(require("./ErrorHandler"));
var Connection_1 = __importStar(require("../connection/Connection"));
var Cache_1 = __importDefault(require("../cache/Cache"));
var index_1 = require("@symblai/api-client/src/index");
var config_1 = __importDefault(require("../config"));
var Logger_1 = __importDefault(require("../logger/Logger"));
var EndpointApi = /** @class */ (function () {
    function EndpointApi(options, apiClient) {
        if (options === void 0) { options = {}; }
        if (!apiClient) {
            this.apiClient = new index_1.ApiClient();
            this.apiClient.basePath = options.basePath || config_1["default"].basePath;
        }
        else {
            this.apiClient = apiClient;
        }
        this.connectionToEndpointApi = new api_client_1.ConnectionToEndpointApi(this.apiClient);
        this.cache = new Cache_1["default"]();
    }
    EndpointApi.validateActions = function (actions) {
        if (actions && Array.isArray(actions)) {
            var invalidActions = actions.filter(function (action) { return !action.invokeOn || !action.name; });
            if (invalidActions.length > 0) {
                throw new Error(JSON.stringify({
                    message: "Invalid actions detected. Count: ".concat(invalidActions.length),
                    invalidActions: invalidActions
                }, null, 2));
            }
        }
        else {
            throw new Error('actions should be an array.');
        }
    };
    EndpointApi.prototype.startEndpoint = function (config) {
        var _this = this;
        if (!config) {
            throw new Error('endpoint configuration is required.');
        }
        var endpoint = config.endpoint, actions = config.actions, intents = config.intents, data = config.data, validationToken = config.validationToken, endpointWebhookUrl = config.endpointWebhookUrl, headers = config.headers, pushSpeakerEvents = config.pushSpeakerEvents, languages = config.languages;
        if (!endpoint.type) {
            throw new Error('endpoint type is required.');
        }
        if (endpoint.type.toLowerCase() === 'pstn') {
            if (!endpoint.phoneNumber) {
                throw new Error("phoneNumber is required when type = 'pstn'.");
            }
        }
        else if (endpoint.type.toLowerCase() === 'sip') {
            if (!endpoint.uri) {
                throw new Error("uri is required when type = 'sip'.");
            }
            if (!endpoint.providerName)
                endpoint.providerName = 'AnyMeeting';
            if (!endpoint.transportConfig)
                endpoint.transportConfig = "transport=UDP;providerName=".concat(endpoint.providerName, ";audioTransport=RTP");
        }
        else {
            throw new Error("endpoint.type = '".concat(endpoint.type, "' is not valid. Supported types are ['pstn' , 'sip']"));
        }
        return new Promise(function (resolve, reject) {
            _this.connectToEndpoint('start', endpoint, actions, intents, data, null, validationToken, endpointWebhookUrl, headers, languages)
                .then(function (_data) {
                var connectionId = _data.connectionId, resultWebSocketUrl = _data.resultWebSocketUrl, eventUrl = _data.eventUrl, conversationId = _data.conversationId;
                if (connectionId) {
                    var connection = new Connection_1["default"]({
                        connectionId: connectionId,
                        webSocketUrl: resultWebSocketUrl,
                        conversationId: conversationId,
                        eventUrl: eventUrl,
                        apiClient: _this.apiClient,
                        status: Connection_1.status.active,
                        pushSpeakerEvents: pushSpeakerEvents
                    });
                    _this.cache.set(connectionId, connection);
                    resolve(connection);
                }
                else {
                    reject({
                        message: 'No connectionId detected in successful response.'
                    });
                }
            })["catch"](function (err) {
                reject(ErrorHandler_1["default"].getError(err));
            });
        });
    };
    EndpointApi.prototype.stopEndpoint = function (config) {
        var _this = this;
        if (!config) {
            throw new Error('endpoint configuration is required.');
        }
        var endpoint = config.endpoint, actions = config.actions, data = config.data, connectionId = config.connectionId;
        return new Promise(function (resolve, reject) {
            _this.connectToEndpoint('stop', endpoint, actions, null, data, connectionId)
                .then(function (_data) {
                var connectionId = _data.connectionId, summaryInfo = _data.summaryInfo, conversationId = _data.conversationId;
                if (connectionId) {
                    if (_this.cache.contains(connectionId)) {
                        var connection = _this.cache.get(connectionId);
                        connection.summaryInfo = summaryInfo;
                        connection.conversationId = conversationId;
                        connection.status = Connection_1.status.closed;
                        resolve(connection);
                    }
                    else {
                        resolve({
                            summaryInfo: summaryInfo,
                            conversationId: conversationId,
                            connectionId: connectionId
                        });
                    }
                }
                else {
                    reject({
                        message: 'No connectionId detected in successful response.'
                    });
                }
            })["catch"](function (err) {
                reject(err);
            });
        });
    };
    EndpointApi.prototype.connectToEndpoint = function (operation, endpoint, actions, intents, data, connectionId, validationToken, endpointWebhookUrl, headers, languages) {
        var _this = this;
        if (!operation) {
            throw new Error('operation is required.');
        }
        if (actions) {
            EndpointApi.validateActions(actions);
        }
        var request;
        if (connectionId) {
            request = {
                connectionId: connectionId,
                operation: operation,
                endpoint: endpoint,
                validationToken: validationToken,
                actions: actions,
                data: data
            };
        }
        else {
            request = {
                operation: operation,
                endpoint: endpoint,
                actions: actions,
                validationToken: validationToken,
                endpointWebhookUrl: endpointWebhookUrl,
                intents: intents,
                headers: headers,
                data: data,
                languages: languages
            };
        }
        var endpointConnectRequest = api_client_1.EndpointConnectRequest.constructFromObject(request);
        return new Promise(function (resolve, reject) {
            try {
                _this.connectionToEndpointApi.connectToEndpoint(endpointConnectRequest, function (error, data, response) {
                    if (error) {
                        reject(ErrorHandler_1["default"].getError(error));
                    }
                    else if (data) {
                        resolve(data);
                    }
                    else {
                        reject(ErrorHandler_1["default"].getError());
                    }
                });
            }
            catch (e) {
                Logger_1["default"].trace(e);
            }
        });
    };
    return EndpointApi;
}());
exports["default"] = EndpointApi;
