export default class IEBackoff {
    max: number;
    min: number;
    factor: number;
    retries: number;
    nextDelay: number;
    /**
     * @param {integer} max - max delay time in milliseconds
     * @param {integer} min - min delay time in milliseconds
     * @param {float} factor - factor to multiply by
     * @param {integer} maxRetries - maximum number of retries
     */
    constructor(max?: number, min?: number, factor?: number, maxRetries?: number);
    reset(): void;
    /**
     * Inverse Exponential backoff for waiting retries of function
     * @param {function} fn - function to call after sleep
     * @param context - Function context to execute with
     * @param args - Array of arguments for the function
     * @param executeWithoutDelay - Skip delay for an execution
     * @returns the provided function and executes it
     */
    run(fn: Function, context?: any, args?: any[], executeWithoutDelay?: boolean): Promise<Function>;
}
