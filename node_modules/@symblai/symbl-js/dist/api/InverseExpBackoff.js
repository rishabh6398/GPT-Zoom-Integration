"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
/* eslint-disable no-promise-executor-return */
var Logger_1 = __importDefault(require("../logger/Logger"));
/* eslint-disable @typescript-eslint/ban-types */
/* eslint-disable arrow-body-style */
var DEFAULT_FACTOR = 0.90;
var DEFAULT_MAX_RETRIES = 20;
var DEFAULT_MAX = 5000;
var DEFAULT_MIN = 100;
var IEBackoff = /** @class */ (function () {
    /**
     * @param {integer} max - max delay time in milliseconds
     * @param {integer} min - min delay time in milliseconds
     * @param {float} factor - factor to multiply by
     * @param {integer} maxRetries - maximum number of retries
     */
    // eslint-disable-next-line max-params
    function IEBackoff(max, min, factor, maxRetries) {
        if (max === void 0) { max = DEFAULT_MAX; }
        if (min === void 0) { min = DEFAULT_MIN; }
        if (factor === void 0) { factor = DEFAULT_FACTOR; }
        if (maxRetries === void 0) { maxRetries = DEFAULT_MAX_RETRIES; }
        if (max <= min) {
            Logger_1["default"].error("Maximum delay must be greater than minimum delay.");
        }
        if (factor >= 1 || factor <= 0) {
            Logger_1["default"].error("Factor must be between 0 and 1.");
        }
        if (maxRetries <= 0) {
            Logger_1["default"].error("Maximum retries must be greater than 0.");
        }
        this.max = max;
        this.min = min;
        this.factor = factor;
        this.retries = maxRetries;
        this.nextDelay = max;
        this.reset = this.reset.bind(this);
        this.run = this.run.bind(this);
    }
    IEBackoff.prototype.reset = function () {
        this.max = DEFAULT_MAX;
        this.min = DEFAULT_MIN;
        this.factor = DEFAULT_FACTOR;
        this.retries = DEFAULT_MAX_RETRIES;
        this.nextDelay = DEFAULT_MAX;
    };
    /**
     * Inverse Exponential backoff for waiting retries of function
     * @param {function} fn - function to call after sleep
     * @param context - Function context to execute with
     * @param args - Array of arguments for the function
     * @param executeWithoutDelay - Skip delay for an execution
     * @returns the provided function and executes it
     */
    IEBackoff.prototype.run = function (fn, context, args, executeWithoutDelay) {
        if (context === void 0) { context = null; }
        if (args === void 0) { args = []; }
        if (executeWithoutDelay === void 0) { executeWithoutDelay = false; }
        return __awaiter(this, void 0, void 0, function () {
            var errorMessage, newBackoffTime, result, err_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!fn || typeof fn !== "function") {
                            errorMessage = "Please provide a callback function to be run after the inverse exponential backoff delay.";
                            Logger_1["default"].error(errorMessage);
                            return [2 /*return*/, Promise.reject(errorMessage)];
                        }
                        if (args && !Array.isArray(args)) {
                            Logger_1["default"].error("No valid arguments passed in args");
                        }
                        if (this.retries === 0) {
                            Logger_1["default"].error("No retries remaining.");
                            throw new Error("No retries remaining.");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 5, , 6]);
                        if (!!executeWithoutDelay) return [3 /*break*/, 3];
                        // Pauses further execution of the function until delay has passed
                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, _this.nextDelay); })];
                    case 2:
                        // Pauses further execution of the function until delay has passed
                        _a.sent();
                        this.retries -= 1;
                        newBackoffTime = this.nextDelay * this.factor;
                        if (newBackoffTime > this.min) {
                            this.nextDelay = newBackoffTime;
                        }
                        else {
                            this.nextDelay = this.min;
                        }
                        _a.label = 3;
                    case 3: return [4 /*yield*/, fn.apply(context, args)];
                    case 4:
                        result = _a.sent();
                        return [2 /*return*/, result];
                    case 5:
                        err_1 = _a.sent();
                        if (this.retries <= 0) {
                            Logger_1["default"].error(err_1);
                            throw err_1;
                        }
                        else {
                            Logger_1["default"].warn("Execution failed with exception: ".concat(err_1 && err_1.message, " -- Retrying"), err_1);
                            return [2 /*return*/, this.run(fn, context, args)];
                        }
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    return IEBackoff;
}());
exports["default"] = IEBackoff;
