"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
/* eslint-disable max-classes-per-file */
/* eslint-disable arrow-body-style */
/* eslint-disable class-methods-use-this */
/* eslint-disable max-len */
/* eslint-disable sort-keys */
/* eslint-disable no-plusplus */
/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
/* eslint-disable capitalized-comments */
/* eslint-disable max-lines */
var config_1 = __importDefault(require("../config"));
var InverseExpBackoff_1 = __importDefault(require("./InverseExpBackoff"));
var WebSocket_1 = __importDefault(require("../websocket/WebSocket"));
var Logger_1 = __importDefault(require("../logger/Logger"));
var uuid_1 = require("uuid");
var webSocketConnectionStatus = {
    "closed": "closed",
    "connected": "connected",
    "connecting": "connecting",
    "error": "error",
    "notAvailable": "not_available",
    "notConnected": "not_connected"
};
var RealtimeApi = /** @class */ (function () {
    function RealtimeApi(options, oauth2, usePreviousGenerationResponses, handlers) {
        if (options === void 0) { options = {}; }
        if (usePreviousGenerationResponses === void 0) { usePreviousGenerationResponses = false; }
        if (handlers === void 0) { handlers = {}; }
        var _this = this;
        var basePath = options.basePath || config_1["default"].basePath;
        basePath = basePath.replace(/^http/u, "ws");
        var uri = "".concat(basePath, "/v1/realtime/insights");
        if (!oauth2) {
            throw new Error("oauth2 is required for Real-time API.");
        }
        var id = options.id;
        // eslint-disable-next-line no-ternary
        this.id = id
            ? id
            : (0, uuid_1.v4)();
        this.usePreviousGenerationResponses = usePreviousGenerationResponses;
        if (options.backoff) {
            this.backoff = new InverseExpBackoff_1["default"](options.backoff.max, options.backoff.min, options.backoff.factor, options.backoff.maxRetries);
        }
        else {
            this.backoff = new InverseExpBackoff_1["default"]();
        }
        this.webSocketUrl = "".concat(uri, "/").concat(this.id);
        this.options = options;
        this.referenceIds = [(0, uuid_1.v4)()];
        this.connect = this.connect.bind(this);
        this._connect = this._connect.bind(this);
        this.reConnect = this.reConnect.bind(this);
        this.onConnectWebSocket = this.onConnectWebSocket.bind(this);
        this.onErrorWebSocket = this.onErrorWebSocket.bind(this);
        this.onMessageWebSocket = this.onMessageWebSocket.bind(this);
        this.onCloseWebSocket = this.onCloseWebSocket.bind(this);
        this.onForceClose = this.onForceClose.bind(this);
        this.onStartedListening = this.onStartedListening.bind(this);
        this.onSpeechDetected = this.onSpeechDetected.bind(this);
        this.onRequestStart = this.onRequestStart.bind(this);
        this.onRequestStop = this.onRequestStop.bind(this);
        this.onMessageResponse = this.onMessageResponse.bind(this);
        this.onInsightResponse = this.onInsightResponse.bind(this);
        this.onTrackerResponse = this.onTrackerResponse.bind(this);
        this.onTopicResponse = this.onTopicResponse.bind(this);
        this.onDataReceived = this.onDataReceived.bind(this);
        this.sendAudio = this.sendAudio.bind(this);
        this.sendStart = this.sendStart.bind(this);
        this.startRequest = this.startRequest.bind(this);
        this.oauth2 = oauth2;
        this.handlers = __assign(__assign({}, (this.options.handlers || {})), handlers);
        this.retryCount = 0;
        this.requestStarted = false;
        this.conversationId = new Promise(function (resolve, reject) {
            _this.conversationIdSuccess = resolve;
            _this.conversationIdError = reject;
        });
    }
    RealtimeApi.setNetworkConnectivityDispatcher = function (networkConnectivityDispatcher) {
        RealtimeApi.networkConnectivityDispatcher = networkConnectivityDispatcher;
    };
    RealtimeApi.prototype.onErrorWebSocket = function (err) {
        this.webSocketStatus = webSocketConnectionStatus.error;
        Logger_1["default"].error(err);
        if (this.onConnectCallback) {
            if (typeof this.onConnectCallback === 'function') {
                this.onConnectCallback(err);
            }
            else {
                Logger_1["default"].warn("onConnectCallback is not a function");
            }
        }
    };
    RealtimeApi.prototype.onMessageWebSocket = function (result) {
        var _this = this;
        // Incoming results for this connection
        if (result) {
            var data_1 = JSON.parse(result);
            if (data_1.type === "message") {
                var type = data_1["message"].type;
                switch (type) {
                    case "recognition_started":
                        if (!this.requestStarted)
                            this.requestStarted = true;
                        this.onRequestStart(data_1.message);
                        break;
                    case "recognition_result":
                        this.onSpeechDetected(data_1.message);
                        break;
                    case "started_listening":
                        this.requestStarted = true;
                        this.onStartedListening(data_1.message);
                        break;
                    case "recognition_stopped":
                        this.onRequestStop();
                        break;
                    case "conversation_completed":
                        this.onRequestStop(data_1.message);
                        if (this.handlers.onConversationCompleted) {
                            setImmediate(function () {
                                _this.handlers.onConversationCompleted(data_1);
                            });
                        }
                        break;
                    case "error":
                        this.onRequestError(data_1);
                        break;
                    default:
                        break;
                }
            }
            else {
                switch (data_1.type) {
                    case "message_response":
                        this.onMessageResponse(data_1.messages);
                        break;
                    case "insight_response":
                        this.onInsightResponse(data_1.insights);
                        break;
                    case "tracker_response":
                        this.onTrackerResponse(data_1);
                        break;
                    case "topic_response":
                        this.onTopicResponse(data_1.topics);
                        break;
                    default:
                        break;
                }
            }
            this.onDataReceived(data_1);
        }
    };
    RealtimeApi.prototype.connect = function (onConnectCallback) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.backoff.run(this._connect, this, [onConnectCallback, this.referenceIds[this.referenceIds.length - 1]], true)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        e_1 = _a.sent();
                        Logger_1["default"].error("Exception caught while retrying to connect: ".concat(e_1 && e_1.message), e_1);
                        if (this.handlers.onReconnectFail && typeof this.handlers.onReconnectFail === "function") {
                            this.handlers.onReconnectFail(e_1);
                        }
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    RealtimeApi.prototype.reConnect = function (reCheckNetworkConnectivity) {
        if (reCheckNetworkConnectivity === void 0) { reCheckNetworkConnectivity = false; }
        return __awaiter(this, void 0, void 0, function () {
            var maxReconnectionAttempts_1, reconnectionIntervalRef_1, e_2;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        this.backoff.reset();
                        if (reCheckNetworkConnectivity && RealtimeApi.networkConnectivityDispatcher) {
                            Logger_1["default"].info('Rechecking network connectivity');
                            RealtimeApi.isOffline = true;
                            RealtimeApi.networkConnectivityDispatcher.forceCheckNetworkConnectivity();
                        }
                        if (!!RealtimeApi.isOffline) return [3 /*break*/, 2];
                        Logger_1["default"].info("Reconnecting...");
                        return [4 /*yield*/, this.oauth2.refreshAuthToken()];
                    case 1:
                        _a.sent();
                        this.referenceIds.push((0, uuid_1.v4)());
                        this.connect(this.onConnectCallback).then(function () {
                            if (_this.requestStarted) {
                                _this.startRequest();
                            }
                        });
                        return [3 /*break*/, 3];
                    case 2:
                        Logger_1["default"].info("Not online. Reconnect delayed.");
                        maxReconnectionAttempts_1 = 900;
                        reconnectionIntervalRef_1 = setInterval(function () {
                            if (!RealtimeApi.isOffline) {
                                clearInterval(reconnectionIntervalRef_1);
                                _this.reConnect();
                            }
                            else if (maxReconnectionAttempts_1 > 0) {
                                maxReconnectionAttempts_1 -= 1;
                            }
                            else {
                                clearInterval(reconnectionIntervalRef_1);
                                var errorMessage = "Max attempts to reconnect exceeded! Not attempting reconnection";
                                Logger_1["default"].error(errorMessage);
                                if (_this.handlers.onReconnectFail && typeof _this.handlers.onReconnectFail === "function") {
                                    _this.handlers.onReconnectFail(new Error(errorMessage));
                                }
                            }
                        }, 2000);
                        _a.label = 3;
                    case 3: return [3 /*break*/, 5];
                    case 4:
                        e_2 = _a.sent();
                        Logger_1["default"].error("Exception caught while reconnecting: ".concat(e_2 && e_2.message), e_2);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    RealtimeApi.prototype.onForceClose = function (referenceId) {
        this.webSocketStatus = webSocketConnectionStatus.closed;
        Logger_1["default"].info("Force closed WebSocket due to network issues -- Attempting to reconnect");
        if (this.options.reconnectOnError) {
            if (this.referenceIds.includes(referenceId)) {
                Logger_1["default"].debug("Attempting reconnect after error.");
                this.referenceIds.splice(this.referenceIds.indexOf(referenceId), 1);
                this.reConnect(true);
            }
            else {
                Logger_1["default"].debug("Reconnection already handled for socket with connectionId: ".concat(this.id));
            }
        }
        else {
            Logger_1["default"].debug("Reconnection not enabled for socket with connectionId: ".concat(this.id));
        }
    };
    RealtimeApi.prototype.onCloseWebSocket = function (referenceId) {
        var _this = this;
        return function (event) {
            _this.webSocketStatus = webSocketConnectionStatus.closed;
            Logger_1["default"].info("WebSocket connection closed", event);
            if (_this.options.reconnectOnError && (event.wasClean === false || event.code === 1005 || event.code === 3006)) {
                if (_this.referenceIds.includes(referenceId)) {
                    Logger_1["default"].debug("Attempting reconnect after error.");
                    _this.referenceIds.splice(_this.referenceIds.indexOf(referenceId), 1);
                    _this.reConnect(event.handshakeFailed);
                }
                else {
                    Logger_1["default"].debug("Reconnection already handled for socket with connectionId: ".concat(_this.id));
                }
            }
            else {
                Logger_1["default"].debug("WebSocket Closed.");
                if (_this.handlers && _this.handlers.onClose) {
                    setImmediate(function () {
                        _this.handlers.onClose(event);
                    });
                }
            }
        };
    };
    RealtimeApi.prototype.onConnectWebSocket = function () {
        Logger_1["default"].debug("WebSocket Connected.");
        this.webSocketStatus = webSocketConnectionStatus.connected;
        if (this.onConnectCallback) {
            Logger_1["default"].debug("Invoking this.onConnectCallback", typeof this.onConnectCallback);
            if (typeof this.onConnectCallback === 'function') {
                this.onConnectCallback(null);
                this.onConnectCallback = null;
            }
            else {
                Logger_1["default"].warn("onConnectCallback is not a function");
            }
        }
    };
    RealtimeApi.prototype._connect = function (onConnectCallback, referenceId) {
        var _this = this;
        return new Promise(function (resolve) {
            if (_this.webSocketStatus !== webSocketConnectionStatus.connected) {
                Logger_1["default"].debug("WebSocket Connecting.");
                if (_this.webSocketStatus !== webSocketConnectionStatus.connecting) {
                    _this.webSocketStatus = webSocketConnectionStatus.connecting;
                }
                if (onConnectCallback)
                    _this.onConnectCallback = onConnectCallback;
                _this.webSocket = new WebSocket_1["default"]({
                    "accessToken": _this.oauth2.activeToken,
                    "onClose": _this.onCloseWebSocket(referenceId),
                    "onConnect": _this.onConnectWebSocket,
                    "onError": _this.onErrorWebSocket,
                    "onMessage": _this.onMessageWebSocket,
                    "url": _this.webSocketUrl,
                    "onConnectSuccess": resolve,
                    "onForceClose": _this.onForceClose,
                    "reconnectOnError": _this.options.reconnectOnError,
                    referenceId: referenceId
                });
            }
            else if (_this.webSocketStatus === webSocketConnectionStatus.connected) {
                resolve();
            }
        });
    };
    RealtimeApi.prototype.onStartedListening = function (message) {
        var _this = this;
        if (!this.usePreviousGenerationResponses) {
            if (this.requestStartedResolve) {
                this.requestStartedResolve();
                this.requestStartedResolve = null;
            }
        }
        else {
            Logger_1["default"].info("Using the older version of 'createStream' - 'startRealtimeRequest'. 'startRealtimeRequest' will be deprecated in the future in favor of new function 'createStream' that provides lower latencies in processing events.");
        }
        if (this.handlers.onStartedListening) {
            setImmediate(function () {
                _this.handlers.onStartedListening(message);
            });
        }
    };
    RealtimeApi.prototype.onRequestStart = function (message) {
        var _this = this;
        if (this.usePreviousGenerationResponses) {
            if (this.requestStartedResolve) {
                this.conversationIdSuccess(message.data && message.data.conversationId);
                this.requestStartedResolve(message.data && message.data.conversationId);
                this.requestStartedResolve = null;
            }
        }
        else {
            var conversationId = message.data && message.data.conversationId;
            if (conversationId) {
                this.conversationIdSuccess(conversationId);
            }
        }
        if (this.handlers.onRequestStart) {
            setImmediate(function () {
                _this.handlers.onRequestStart(message);
            });
        }
    };
    RealtimeApi.prototype.onRequestStop = function (conversationData) {
        var _this = this;
        if (this.usePreviousGenerationResponses) {
            if (this.requestStoppedResolve && conversationData) {
                this.requestStoppedResolve(conversationData);
                this.requestStoppedResolve = null;
            }
        }
        else {
            if (this.requestStoppedResolve) {
                this.requestStoppedResolve();
                this.requestStoppedResolve = null;
            }
        }
        if (this.options.disconnectOnStopRequest !== false) {
            this.webSocket.disconnect();
        }
        if (this.handlers.onRequestStop) {
            setImmediate(function () {
                _this.handlers.onRequestStop(conversationData);
            });
        }
    };
    RealtimeApi.prototype.onRequestError = function (err) {
        var _this = this;
        if (this.requestErrorReject) {
            this.requestErrorReject(err);
            this.requestErrorReject = null;
        }
        if (this.handlers.onRequestError) {
            setImmediate(function () {
                _this.handlers.onRequestError(err);
            });
        }
    };
    RealtimeApi.prototype.sendStart = function (resolve, reject) {
        var _a = this.options, insightTypes = _a.insightTypes, config = _a.config, speaker = _a.speaker, trackers = _a.trackers, customVocabulary = _a.customVocabulary, disconnectOnStopRequest = _a.disconnectOnStopRequest, disconnectOnStopRequestTimeout = _a.disconnectOnStopRequestTimeout, noConnectionTimeout = _a.noConnectionTimeout;
        if (config) {
            if (!config.speechRecognition) {
                var speechRecognition_1 = {};
                if (!config.sampleRateHertz) {
                    throw new Error("sampleRateHertz must be provided.");
                }
                else if (typeof config.sampleRateHertz !== "number") {
                    throw new Error("sampleRateHertz must be a valid number");
                }
                Object.keys(config).forEach(function (key) {
                    switch (key) {
                        case "engine":
                        case "encoding":
                        case "sampleRateHertz":
                        case "interimResults":
                            speechRecognition_1[key] = config[key];
                            delete config[key];
                            break;
                        default:
                            break;
                    }
                });
                if (Object.keys(speechRecognition_1).length > 0) {
                    config.speechRecognition = speechRecognition_1;
                }
            }
        }
        Logger_1["default"].debug("Send start request.");
        this.requestStartedResolve = resolve;
        this.onRequestError = reject;
        var configObj = {
            "type": "start_request",
            "insightTypes": insightTypes || [],
            config: config,
            speaker: speaker,
            trackers: trackers,
            customVocabulary: customVocabulary
        };
        if (disconnectOnStopRequest !== undefined && disconnectOnStopRequestTimeout !== undefined) {
            configObj.disconnectOnStopRequest = disconnectOnStopRequest;
            configObj.disconnectOnStopRequestTimeout = disconnectOnStopRequestTimeout;
        }
        if (noConnectionTimeout !== undefined) {
            configObj.noConnectionTimeout = noConnectionTimeout;
        }
        this.webSocket.send(JSON.stringify(configObj));
    };
    RealtimeApi.prototype.startRequest = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.backoff.reset();
            if (_this.webSocketStatus === webSocketConnectionStatus.connected) {
                _this.sendStart(resolve, reject);
            }
            else {
                Logger_1["default"].info("WebSocket is connecting. Retry will be attempted.", _this.webSocketStatus);
                var retry_1 = function () { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        if (!this.requestStarted) {
                            Logger_1["default"].info("Retry attempt: ", this.retryCount);
                            if (this.webSocketStatus ===
                                webSocketConnectionStatus.connected) {
                                this.sendStart(resolve, reject);
                            }
                            else {
                                try {
                                    this.backoff.run(retry_1.bind(this), this);
                                }
                                catch (e) {
                                    reject('Too many retries attempted. Try again later.');
                                }
                            }
                        }
                        this.retryCount += 1;
                        return [2 /*return*/];
                    });
                }); };
                try {
                    setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, retry_1()];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, this.backoff.run(retry_1.bind(this), this)];
                                case 2:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    }); }, 500);
                }
                catch (e) {
                    reject('Too many retries attempted. Try again later.');
                }
            }
        });
    };
    RealtimeApi.prototype.stopRequest = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.webSocketStatus === webSocketConnectionStatus.connected) {
                if (!_this.requestStarted) {
                    Logger_1["default"].warn("Invoked stopRequest() on an idle stream for id: ".concat(_this.id));
                    resolve();
                    return;
                }
                Logger_1["default"].debug("Send stop request.");
                _this.requestStoppedResolve = resolve;
                _this.onRequestError = reject;
                _this.webSocket.send(JSON.stringify({
                    "type": "stop_request"
                }));
            }
            else {
                // eslint-disable-next-line max-len
                Logger_1["default"].warn("WebSocket connection is not connected. No stop request sent.");
                resolve();
            }
            if (_this.options.disconnectOnStopRequest === false) {
                _this._cleanForReconnect();
            }
        });
    };
    RealtimeApi.prototype._cleanForReconnect = function () {
        this.requestStarted = false;
    };
    RealtimeApi.prototype.sendAudio = function (data) {
        this.requestStarted && this.webSocket.send(data);
    };
    RealtimeApi.prototype.onSpeechDetected = function (data) {
        var _this = this;
        if (this.handlers.onSpeechDetected) {
            setImmediate(function () {
                _this.handlers.onSpeechDetected(data);
            });
        }
    };
    RealtimeApi.prototype.onDataReceived = function (data) {
        var _this = this;
        if (this.handlers.onDataReceived) {
            setImmediate(function () {
                _this.handlers.onDataReceived(data);
            });
        }
    };
    RealtimeApi.prototype.onMessageResponse = function (messages) {
        var _this = this;
        if (this.handlers.onMessageResponse) {
            setImmediate(function () {
                _this.handlers.onMessageResponse(messages);
            });
        }
    };
    RealtimeApi.prototype.onInsightResponse = function (messages) {
        var _this = this;
        if (this.handlers.onInsightResponse) {
            setImmediate(function () {
                _this.handlers.onInsightResponse(messages);
            });
        }
    };
    RealtimeApi.prototype.onTrackerResponse = function (trackers) {
        var _this = this;
        if (this.handlers.onTrackerResponse) {
            setImmediate(function () {
                _this.handlers.onTrackerResponse(trackers);
            });
        }
    };
    RealtimeApi.prototype.onTopicResponse = function (topics) {
        var _this = this;
        if (this.handlers.onTopicResponse) {
            setImmediate(function () {
                _this.handlers.onTopicResponse(topics);
            });
        }
    };
    // eslint-disable-next-line default-param-last
    RealtimeApi.isOffline = false;
    return RealtimeApi;
}());
exports["default"] = RealtimeApi;
