"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
/* eslint-disable sort-keys */
/* eslint-disable max-len */
var InverseExpBackoff_1 = __importDefault(require("./InverseExpBackoff"));
var WebSocket_1 = __importDefault(require("../websocket/WebSocket"));
var config_1 = __importDefault(require("../config"));
var Logger_1 = __importDefault(require("../logger/Logger"));
var uuid_1 = require("uuid");
var webSocketConnectionStatus = {
    "notAvailable": "not_available",
    "notConnected": "not_connected",
    "connected": "connected",
    "error": "error",
    "closed": "closed",
    "connecting": "connecting"
};
var SessionApi = /** @class */ (function () {
    function SessionApi(options, oauth2) {
        this.connectionOptions = options.options;
        var onMessage = this.connectionOptions.handlers.onMessage;
        var isStreaming = options.isStreaming;
        if (!onMessage || typeof onMessage !== "function") {
            throw new Error("onMessage function is required for establishing connection with Session-Manger Websocket.");
        }
        var basePath = options.basePath || config_1["default"].basePath;
        basePath = basePath.replace(/^http/u, "ws");
        var session = "session";
        if (isStreaming) {
            session = "v1";
        }
        var uri = "".concat(basePath, "/").concat(session, "/subscribe");
        if (!oauth2) {
            throw new Error("oauth2 is required for Session-Manager API.");
        }
        var id = options.id;
        if (!id) {
            throw new Error("id is required for establishing connection.");
        }
        this.backoff = new InverseExpBackoff_1["default"]();
        this.oauth2 = oauth2;
        this.id = id;
        this.onMessage = onMessage;
        this.webSocketUrl = "".concat(uri, "/").concat(this.id);
        this.options = options;
        this.referenceIds = [(0, uuid_1.v4)()];
        this.connect = this.connect.bind(this);
        this._connect = this._connect.bind(this);
        this.reConnect = this.reConnect.bind(this);
        this.onConnectWebSocket = this.onConnectWebSocket.bind(this);
        this.onErrorWebSocket = this.onErrorWebSocket.bind(this);
        this.onMessageWebSocket = this.onMessageWebSocket.bind(this);
        this.onCloseWebSocket = this.onCloseWebSocket.bind(this);
        this.disconnect = this.disconnect.bind(this);
        this.onForceClose = this.onForceClose.bind(this);
    }
    SessionApi.setNetworkConnectivityDispatcher = function (networkConnectivityDispatcher) {
        SessionApi.networkConnectivityDispatcher = networkConnectivityDispatcher;
    };
    SessionApi.prototype.reConnect = function (reCheckNetworkConnectivity) {
        if (reCheckNetworkConnectivity === void 0) { reCheckNetworkConnectivity = false; }
        return __awaiter(this, void 0, void 0, function () {
            var maxReconnectionAttempts_1, reconnectionIntervalRef_1, e_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        this.backoff.reset();
                        if (reCheckNetworkConnectivity && SessionApi.networkConnectivityDispatcher) {
                            Logger_1["default"].info('Rechecking network connectivity');
                            SessionApi.isOffline = true;
                            SessionApi.networkConnectivityDispatcher.forceCheckNetworkConnectivity();
                        }
                        if (!!SessionApi.isOffline) return [3 /*break*/, 2];
                        Logger_1["default"].info("Reconnecting...");
                        return [4 /*yield*/, this.oauth2.refreshAuthToken()];
                    case 1:
                        _a.sent();
                        this.referenceIds.push((0, uuid_1.v4)());
                        this.connect(this.onConnectCallback);
                        return [3 /*break*/, 3];
                    case 2:
                        Logger_1["default"].info("Not online. Reconnect delayed.");
                        maxReconnectionAttempts_1 = 900;
                        reconnectionIntervalRef_1 = setInterval(function () {
                            if (!SessionApi.isOffline) {
                                clearInterval(reconnectionIntervalRef_1);
                                _this.reConnect();
                            }
                            else if (maxReconnectionAttempts_1 > 0) {
                                maxReconnectionAttempts_1 -= 1;
                            }
                            else {
                                clearInterval(reconnectionIntervalRef_1);
                                var errorMessage = "Max attempts to reconnect exceeded! Not attempting reconnection";
                                Logger_1["default"].error(errorMessage);
                                if (_this.connectionOptions.handlers.onReconnectFail && typeof _this.connectionOptions.handlers.onReconnectFail === "function") {
                                    _this.connectionOptions.handlers.onReconnectFail(new Error(errorMessage));
                                }
                            }
                        }, 2000);
                        _a.label = 3;
                    case 3: return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        Logger_1["default"].error("Exception caught while reconnecting: ".concat(e_1 && e_1.message), e_1);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    SessionApi.prototype.onForceClose = function (referenceId) {
        this.webSocketStatus = webSocketConnectionStatus.closed;
        Logger_1["default"].info("Force closed WebSocket due to network issues -- Attempting to reconnect");
        if (this.connectionOptions.reconnectOnError) {
            if (this.referenceIds.includes(referenceId)) {
                Logger_1["default"].debug("Attempting reconnect after error.");
                this.referenceIds.splice(this.referenceIds.indexOf(referenceId), 1);
                this.reConnect(true);
            }
            else {
                Logger_1["default"].debug("Reconnection already handled for socket with connectionId: ".concat(this.id));
            }
        }
        else {
            Logger_1["default"].debug("Reconnection not enabled for socket with connectionId: ".concat(this.id));
        }
    };
    SessionApi.prototype.onCloseWebSocket = function (referenceId) {
        var _this = this;
        return function (event) {
            _this.webSocketStatus = webSocketConnectionStatus.closed;
            Logger_1["default"].info("WebSocket connection closed", event);
            if (_this.connectionOptions.reconnectOnError && (event.wasClean === false || event.code === 1005 || event.code === 3006)) {
                if (_this.referenceIds.includes(referenceId)) {
                    Logger_1["default"].debug("Attempting reconnect after error.");
                    _this.referenceIds.splice(_this.referenceIds.indexOf(referenceId), 1);
                    _this.reConnect(event.handshakeFailed);
                }
                else {
                    Logger_1["default"].debug("Reconnection already handled for socket with connectionId: ".concat(_this.id));
                }
            }
            else {
                Logger_1["default"].debug(new Date().toISOString(), "WebSocket Closed.");
                if (_this.connectionOptions.handlers.onClose && typeof _this.connectionOptions.handlers.onClose === "function") {
                    _this.connectionOptions.handlers.onClose();
                }
            }
        };
    };
    SessionApi.prototype.onConnectWebSocket = function () {
        Logger_1["default"].debug("WebSocket Connected.");
        this.webSocketStatus = webSocketConnectionStatus.connected;
        if (this.onConnectCallback && typeof this.onConnectCallback === "function") {
            this.onConnectCallback();
            this.onConnectCallback = null;
        }
        if (this.connectionOptions.handlers.onSubscribe && typeof this.connectionOptions.handlers.onSubscribe === "function") {
            this.connectionOptions.handlers.onSubscribe();
        }
    };
    SessionApi.prototype.onErrorWebSocket = function (err) {
        this.webSocketStatus = webSocketConnectionStatus.error;
        Logger_1["default"].error(err);
    };
    SessionApi.prototype.onMessageWebSocket = function (result) {
        // Expecting insight data
        if (result) {
            var data = JSON.parse(result);
            Logger_1["default"].debug("Websocket Message: ", { data: data });
            this.onMessage(data);
        }
    };
    SessionApi.prototype._connect = function (onConnectCallback, referenceId) {
        var _this = this;
        return new Promise(function (resolve) {
            if (_this.webSocketStatus !== webSocketConnectionStatus.connected) {
                Logger_1["default"].debug("WebSocket Connecting on: ".concat(_this.webSocketUrl));
                if (_this.webSocketStatus !== webSocketConnectionStatus.connecting) {
                    _this.webSocketStatus = webSocketConnectionStatus.connecting;
                }
                Logger_1["default"].debug("connectionOptions", _this.connectionOptions);
                if (onConnectCallback) {
                    _this.onConnectCallback = onConnectCallback;
                }
                _this.webSocket = new WebSocket_1["default"]({
                    "url": _this.webSocketUrl,
                    "accessToken": _this.oauth2.activeToken,
                    "onError": _this.onErrorWebSocket,
                    "onClose": _this.onCloseWebSocket(referenceId),
                    "onMessage": _this.onMessageWebSocket,
                    "onConnect": _this.onConnectWebSocket,
                    "onConnectSuccess": resolve,
                    "onForceClose": _this.onForceClose,
                    "reconnectOnError": _this.connectionOptions.reconnectOnError,
                    referenceId: referenceId
                });
            }
            else if (_this.webSocketStatus === webSocketConnectionStatus.connected) {
                resolve();
            }
        });
    };
    SessionApi.prototype.connect = function (onConnectCallback) {
        return __awaiter(this, void 0, void 0, function () {
            var e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.backoff.run(this._connect, this, [onConnectCallback, this.referenceIds[this.referenceIds.length - 1]], true)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        e_2 = _a.sent();
                        Logger_1["default"].error("Exception caught while retrying to connect: ".concat(e_2 && e_2.message), e_2);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    SessionApi.prototype.disconnect = function () {
        Logger_1["default"].debug("Disconnecting WebSocket Connection");
        this.webSocket.disconnect();
    };
    SessionApi.isOffline = false;
    return SessionApi;
}());
exports["default"] = SessionApi;
