"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.status = void 0;
var EventApi_1 = __importDefault(require("../event/EventApi"));
var Logger_1 = __importDefault(require("../logger/Logger"));
exports.status = {
    active: 'active',
    inactive: 'inactive',
    interrupted: 'interrupted',
    closed: 'closed'
};
var Connection = /** @class */ (function () {
    function Connection(options) {
        if (options === void 0) { options = {}; }
        if (!options.connectionId) {
            throw new Error('connectionId is required');
        }
        this._connectionId = options.connectionId;
        this._webSocketUrl = options.webSocketUrl;
        this._eventUrl = options.eventUrl;
        this._status = options.status || exports.status.inactive;
        this._summaryInfo = options.summaryInfo || null;
        this._conversationId = options.conversationId || null;
        this._subscribers = {};
        this._pushSpeakerEvents = options.pushSpeakerEvents || false;
        try {
            this._eventApi = new EventApi_1["default"](this, options.apiClient, { pushSpeakerEvents: this._pushSpeakerEvents });
        }
        catch (e) {
            Logger_1["default"].trace(e);
        }
    }
    Object.defineProperty(Connection.prototype, "connectionId", {
        get: function () {
            return this._connectionId;
        },
        set: function (value) {
            this._connectionId = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Connection.prototype, "webSocketUrl", {
        get: function () {
            return this._webSocketUrl;
        },
        set: function (value) {
            this._webSocketUrl = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Connection.prototype, "eventUrl", {
        get: function () {
            return this._eventUrl;
        },
        set: function (value) {
            this._eventUrl = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Connection.prototype, "status", {
        get: function () {
            return this._status;
        },
        set: function (value) {
            this._status = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Connection.prototype, "summaryInfo", {
        get: function () {
            return this._summaryInfo;
        },
        set: function (value) {
            this._summaryInfo = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Connection.prototype, "conversationId", {
        get: function () {
            return this._conversationId;
        },
        set: function (value) {
            this._conversationId = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Connection.prototype, "eventApi", {
        get: function () {
            return this._eventApi;
        },
        enumerable: false,
        configurable: true
    });
    Connection.prototype.pushEvent = function (event, cb) {
        this._eventApi.pushEvent(event, cb);
    };
    Connection.prototype.publish = function (value) {
        var _this = this;
        if (value && this._subscribers.length > 0) {
            this._subscribers.keys().forEach(function (name) { return _this._subscribers[name](value); });
        }
    };
    Connection.prototype.subscribe = function (name, callback) {
        var _name = name;
        var _callback = callback;
        if (arguments.length === 1) {
            _callback = name;
            _name = 'default';
        }
        if (callback && typeof callback === 'function') {
            this._subscribers[name] = callback;
        }
    };
    Connection.prototype.unsubscribe = function (name) {
        if (name) {
            delete this._subscribers[name];
        }
        else {
            delete this._subscribers['default'];
        }
    };
    return Connection;
}());
exports["default"] = Connection;
