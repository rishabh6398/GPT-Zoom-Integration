export default class EventApi {
    static getWebSocketConnectionStatuses(): {
        notAvailable: string;
        notConnected: string;
        isConnecting: string;
        connected: string;
        error: string;
        closed: string;
    };
    constructor(connection: any, apiClient: any, options?: {});
    webSocketUrl: any;
    eventUrl: any;
    options: {};
    connection: any;
    eventsQueue: PQueue<import("p-queue/dist/priority-queue").default, import("p-queue").DefaultAddOptions>;
    eventCount: number;
    connectWebSocket(webSocketUrl: any): void;
    onConnectWebSocket(): void;
    onErrorWebSocket(err: any): void;
    onMessageWebSocket(result: any): void;
    onCloseWebSocket(): void;
    publishResults(result: any): void;
    apiClient: any;
    maxWaitTimeForWebSocketConnectionEstablishmentInSeconds: number;
    webSocketConnectionEstablishmentPollInterval: number;
    webSocketStatus: string;
    webSocket: WebSocket;
    enqueueEvent(event: any): Promise<void>;
    sendEvent(event: any): Promise<any>;
    pushEvent(event: any, cb: any): void;
}
import PQueue from "p-queue";
import WebSocket from "../websocket/WebSocket";
