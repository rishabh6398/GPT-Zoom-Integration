"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var WebSocket_1 = __importDefault(require("../websocket/WebSocket"));
var Logger_1 = __importDefault(require("../logger/Logger"));
var p_queue_1 = __importDefault(require("p-queue"));
var webSocketConnectionStatus = {
    notAvailable: 'not_available',
    notConnected: 'not_connected',
    isConnecting: 'is_connecting',
    connected: 'connected',
    error: 'error',
    closed: 'closed'
};
var EventApi = /** @class */ (function () {
    function EventApi(connection, apiClient, options) {
        if (options === void 0) { options = {}; }
        var _this = this;
        if (!connection.webSocketUrl || !connection.eventUrl) {
            throw new Error('At least one of webSocketUrl and eventUrl is required in connection.');
        }
        if (!apiClient) {
            throw new Error('apiClient is required for EventApi');
        }
        this.webSocketUrl = connection.webSocketUrl;
        this.eventUrl = connection.eventUrl;
        this.options = options;
        this.connection = connection;
        this.eventsQueue = new p_queue_1["default"]({ concurrency: 1 });
        this.eventCount = 0;
        this.eventsQueue.on('active', function () {
            Logger_1["default"].trace("Working on event #".concat(++_this.eventCount, ", Size: ").concat(_this.eventsQueue.size, ", Pending: ").concat(_this.eventsQueue.pending));
        });
        this.connectWebSocket = this.connectWebSocket.bind(this);
        this.onConnectWebSocket = this.onConnectWebSocket.bind(this);
        this.onErrorWebSocket = this.onErrorWebSocket.bind(this);
        this.onMessageWebSocket = this.onMessageWebSocket.bind(this);
        this.onCloseWebSocket = this.onCloseWebSocket.bind(this);
        this.publishResults = this.publishResults.bind(this);
        this.apiClient = apiClient;
        this.maxWaitTimeForWebSocketConnectionEstablishmentInSeconds = 60;
        this.webSocketConnectionEstablishmentPollInterval = 250;
        if (this.webSocketUrl) {
            this.webSocketStatus = webSocketConnectionStatus.notConnected;
            this.options.pushSpeakerEvents && this.connectWebSocket(this.webSocketUrl);
        }
        else if (this.eventUrl) {
            this.webSocketStatus = webSocketConnectionStatus.notAvailable;
            // TODO: REST client for webhook
        }
    }
    EventApi.prototype.onErrorWebSocket = function (err) {
        this.webSocketStatus = webSocketConnectionStatus.error;
        Logger_1["default"].error(err);
        // TODO: Switch to WebHook mode while connection recovers
    };
    EventApi.getWebSocketConnectionStatuses = function () {
        return webSocketConnectionStatus;
    };
    EventApi.prototype.onMessageWebSocket = function (result) {
        // Incoming results for this connection
        this.publishResults(result);
    };
    EventApi.prototype.onCloseWebSocket = function () {
        this.webSocketStatus = webSocketConnectionStatus.closed;
    };
    EventApi.prototype.onConnectWebSocket = function () {
        this.webSocketStatus = webSocketConnectionStatus.connected;
    };
    EventApi.prototype.connectWebSocket = function (webSocketUrl) {
        this.webSocketStatus = webSocketConnectionStatus.isConnecting;
        Logger_1["default"].trace("Establishing Events WebSocket Connection");
        this.webSocket = new WebSocket_1["default"]({
            url: webSocketUrl,
            accessToken: this.apiClient.authentications.jwt.apiKey,
            onError: this.onErrorWebSocket,
            onClose: this.onCloseWebSocket,
            onMessage: this.onMessageWebSocket,
            onConnect: this.onConnectWebSocket
        });
    };
    EventApi.prototype.enqueueEvent = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!event.timestamp) {
                            event.timestamp = new Date().toISOString();
                        }
                        return [4 /*yield*/, this.eventsQueue.add(function () { return _this.sendEvent(event); })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    EventApi.prototype.sendEvent = function (event) {
        var _this = this;
        if (this.webSocketStatus === webSocketConnectionStatus.notConnected || this.webSocketStatus === webSocketConnectionStatus.isConnecting) {
            return new Promise(function (resolve, reject) {
                var maxWaitCount = _this.maxWaitTimeForWebSocketConnectionEstablishmentInSeconds * 1000 / _this.webSocketConnectionEstablishmentPollInterval;
                var intervalReference = setInterval(function () {
                    if (_this.webSocketStatus === webSocketConnectionStatus.connected) {
                        clearInterval(intervalReference);
                        intervalReference = null;
                        var eventToSend = JSON.stringify(event);
                        Logger_1["default"].trace("Sending event on Events WebSocket after WebSocket connection status changed to ".concat(webSocketConnectionStatus.connected), eventToSend);
                        _this.webSocket.send(eventToSend);
                        resolve();
                    }
                    if (maxWaitCount <= 0) {
                        var errorMessage = "Events WebSocket connection was in ".concat(_this.webSocketStatus, " state after ").concat(_this.maxWaitTimeForWebSocketConnectionEstablishmentInSeconds, " seconds.");
                        clearInterval(intervalReference);
                        Logger_1["default"].error(errorMessage);
                        reject(errorMessage);
                    }
                    --maxWaitCount;
                }, _this.webSocketConnectionEstablishmentPollInterval);
            });
        }
        else if (this.webSocketStatus === webSocketConnectionStatus.connected) {
            var eventToSend = JSON.stringify(event);
            Logger_1["default"].trace('Sending event on Events WebSocket connection', eventToSend);
            this.webSocket.send(eventToSend);
            return Promise.resolve();
        }
        else if (this.webSocketStatus === webSocketConnectionStatus.error) {
            var errorMessage = 'Cannot send events as WebSocket connection was closed with error';
            Logger_1["default"].error(errorMessage);
            return Promise.reject(errorMessage);
        }
        else {
            var errorMessage = 'Cannot send events as WebSocket connection was already closed or not established';
            Logger_1["default"].error(errorMessage);
            return Promise.reject(errorMessage);
        }
    };
    EventApi.prototype.pushEvent = function (event, cb) {
        if (this.webSocketStatus === webSocketConnectionStatus.notConnected) {
            this.connectWebSocket(this.webSocketUrl);
        }
        if (this.webSocketStatus === webSocketConnectionStatus.connected ||
            this.webSocketStatus === webSocketConnectionStatus.isConnecting ||
            this.webSocketStatus === webSocketConnectionStatus.notConnected) {
            // TODO: Handle when data is not getting flushed to socket or error has occurred
            this.enqueueEvent(event);
        }
        else if (this.webSocketStatus === webSocketConnectionStatus.notAvailable ||
            this.webSocketStatus === webSocketConnectionStatus.error) {
            // TODO: push on event WebHook
        }
        else {
            if (cb) {
                cb({
                    message: 'Connection is already closed.'
                });
            }
        }
    };
    EventApi.prototype.publishResults = function (result) {
        this.connection.publish(result);
    };
    return EventApi;
}());
exports["default"] = EventApi;
