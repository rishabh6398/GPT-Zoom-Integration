"use strict";
exports.__esModule = true;
var SpeakerEvent = /** @class */ (function () {
    function SpeakerEvent(options) {
        if (options === void 0) { options = {}; }
        if (!options) {
            throw new Error("SpeakerEvent configuration is required.");
        }
        if (!options.type) {
            throw new Error("'type' is required parameter for speaker event");
        }
        if (!options.user) {
            throw new Error("'user' is required parameter for speaker event");
        }
        if (!options.user.userId) {
            throw new Error("'userId' is required parameter in 'user' for speaker event");
        }
        this.topic = "speaker";
        this._type = options.type;
        this._user = options.user;
        this._timestamp = options.timestamp
            ? new Date(options.timestamp).toISOString()
            : options._timestamp
                ? new Date(options._timestamp).toISOString()
                : new Date().toISOString();
    }
    Object.defineProperty(SpeakerEvent, "types", {
        get: function () {
            return {
                "startedSpeaking": "started_speaking",
                "stoppedSpeaking": "stopped_speaking",
                "joined": "joined",
                "left": "left"
            };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SpeakerEvent.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SpeakerEvent.prototype, "user", {
        get: function () {
            return this._user;
        },
        set: function (value) {
            this._user = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SpeakerEvent.prototype, "timestamp", {
        get: function () {
            return this._timestamp;
        },
        set: function (value) {
            this._timestamp = value;
        },
        enumerable: false,
        configurable: true
    });
    SpeakerEvent.prototype.toJSON = function () {
        return {
            "topic": this.topic,
            "type": this._type,
            "user": this._user,
            "timestamp": this._timestamp
        };
    };
    return SpeakerEvent;
}());
exports["default"] = SpeakerEvent;
