import * as log from "loglevel";
/**
 * Represents the logger
 * @constructor
 * Checks whether or not it's running in node
 * or the browser and binds all methods from
 * the "loglevel" package to the Logger object
 * to either the global or window objects.
 */
export declare class Logger {
    logger: typeof log;
    constructor();
    initializeLogger(): void;
    /**
     * Sets the logging level.
     * @param {string} level - logging level
     */
    setLevel(level: any): void;
    /**
     * Returns the current logging level.
     * @returns {string} - logging level
     */
    getLevel(): string;
    /**
     * Sets the default logging level.
     * @param {string} level - logging level
     */
    setDefaultLevel(level: any): void;
    /**
     * Outputs a stack trace that will show the call path
     * taken to reach the point of the value
     * @param {string} value
     */
    trace(msg: any, meta?: {}): void;
    /**
     * Outputs a debug level logging message
     */
    debug(msg: any, meta?: {}): void;
    /**
     * Outputs a basic log level logging message
     */
    log(msg: any, meta?: {}): void;
    /**
     * Outputs an informational logging message
     */
    info(msg: any, meta?: {}): void;
    /**
     * Outputs a warn level logging message
     */
    warn(msg: any, meta?: {}): void;
    /**
     * Outputs an error level logging message
     */
    error(msg: any, meta?: {}): void;
}
declare const logger: Logger;
export default logger;
