"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.Logger = void 0;
var log = __importStar(require("loglevel"));
var detect_node_1 = __importDefault(require("detect-node"));
/**
 * Represents the logger
 * @constructor
 * Checks whether or not it's running in node
 * or the browser and binds all methods from
 * the "loglevel" package to the Logger object
 * to either the global or window objects.
 */
var Logger = /** @class */ (function () {
    function Logger() {
        this.initializeLogger();
        this.trace = this.trace.bind(this);
        this.debug = this.debug.bind(this);
        this.log = this.log.bind(this);
        this.info = this.info.bind(this);
        this.warn = this.warn.bind(this);
        this.error = this.error.bind(this);
    }
    Logger.prototype.initializeLogger = function () {
        if (detect_node_1["default"]) {
            if (global.clientSdkLogger) {
                this.logger = global.clientSdkLogger;
            }
            else {
                this.logger = log;
                global.clientSdkLogger = this.logger;
            }
        }
        else if (typeof window !== "undefined") {
            if (window.clientSdkLogger) {
                this.logger = window.clientSdkLogger;
            }
            else {
                this.logger = log;
                window.clientSdkLogger = this.logger;
            }
        }
        else {
            this.logger = log;
        }
    };
    /**
     * Sets the logging level.
     * @param {string} level - logging level
     */
    Logger.prototype.setLevel = function (level) {
        this.logger.setLevel.apply(null, [level]);
    };
    /**
     * Returns the current logging level.
     * @returns {string} - logging level
     */
    Logger.prototype.getLevel = function () {
        return this.logger.getLevel.apply(null, []);
    };
    /**
     * Sets the default logging level.
     * @param {string} level - logging level
     */
    Logger.prototype.setDefaultLevel = function (level) {
        this.logger.setDefaultLevel.apply(null, [level]);
    };
    /**
     * Outputs a stack trace that will show the call path
     * taken to reach the point of the value
     * @param {string} value
     */
    Logger.prototype.trace = function (msg, meta) {
        if (meta === void 0) { meta = {}; }
        this.logger.trace.apply(null, [msg, meta]);
    };
    /**
     * Outputs a debug level logging message
     */
    Logger.prototype.debug = function (msg, meta) {
        if (meta === void 0) { meta = {}; }
        this.logger.debug.apply(null, [msg, meta]);
    };
    /**
     * Outputs a basic log level logging message
     */
    Logger.prototype.log = function (msg, meta) {
        if (meta === void 0) { meta = {}; }
        this.logger.log.apply(null, [msg, meta]);
    };
    /**
     * Outputs an informational logging message
     */
    Logger.prototype.info = function (msg, meta) {
        if (meta === void 0) { meta = {}; }
        this.logger.info.apply(null, [msg, meta]);
    };
    /**
     * Outputs a warn level logging message
     */
    Logger.prototype.warn = function (msg, meta) {
        if (meta === void 0) { meta = {}; }
        this.logger.warn.apply(null, [msg, meta]);
    };
    /**
     * Outputs an error level logging message
     */
    Logger.prototype.error = function (msg, meta) {
        if (meta === void 0) { meta = {}; }
        this.logger.error.apply(null, [msg, meta]);
    };
    return Logger;
}());
exports.Logger = Logger;
var logger = new Logger();
logger.setDefaultLevel("warn");
exports["default"] = logger;
