"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCompletion = void 0;
const axios_1 = __importDefault(require("axios"));
const mapKeys_1 = __importDefault(require("lodash/mapKeys"));
const openAIConfiguration_1 = require("../../config/openAIConfiguration");
const removeLastSentence_1 = require("../string/removeLastSentence");
const completionKeyTranslations_1 = require("./literals/completionKeyTranslations");
async function getCompletion(prompt, options = {}, authOptions = {}) {
    var _a;
    const translatedOptions = mapKeys_1.default(options, (_x, key) => completionKeyTranslations_1.completionKeyTranslations[key]);
    const authKey = (_a = authOptions === null || authOptions === void 0 ? void 0 : authOptions.openAISecretKey) !== null && _a !== void 0 ? _a : openAIConfiguration_1.openAIConfiguration.secretKey;
    if (!authKey) {
        throw new TypeError("MISSING SECRET KEY: Either specify secret key in environment, or pass in as auth parameter");
    }
    const completionResult = (await axios_1.default.post(openAIConfiguration_1.openAIConfiguration.engineCompletionEndpoint, {
        prompt,
        ...translatedOptions,
    }, {
        headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${authKey}`,
        },
    })).data;
    return removeLastSentence_1.removeLastSentence(prompt + completionResult.choices[0].text);
}
exports.getCompletion = getCompletion;
